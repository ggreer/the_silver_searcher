/* automatically generated by rust-bindgen 0.54.1 */

pub const _GETOPT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 32;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const _GETOPT_EXT_H: u32 = 1;
pub const no_argument: u32 = 0;
pub const required_argument: u32 = 1;
pub const optional_argument: u32 = 2;
pub const _SYS_STAT_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const __time_t_defined: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _STAT_VER_KERNEL: u32 = 0;
pub const _STAT_VER_LINUX: u32 = 1;
pub const _MKNOD_VER_LINUX: u32 = 0;
pub const _STAT_VER: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const _MKNOD_VER: u32 = 0;
pub const PCRE_MAJOR: u32 = 8;
pub const PCRE_MINOR: u32 = 44;
pub const PCRE_DATE: u32 = 2006;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const PCRE_CASELESS: u32 = 1;
pub const PCRE_MULTILINE: u32 = 2;
pub const PCRE_DOTALL: u32 = 4;
pub const PCRE_EXTENDED: u32 = 8;
pub const PCRE_ANCHORED: u32 = 16;
pub const PCRE_DOLLAR_ENDONLY: u32 = 32;
pub const PCRE_EXTRA: u32 = 64;
pub const PCRE_NOTBOL: u32 = 128;
pub const PCRE_NOTEOL: u32 = 256;
pub const PCRE_UNGREEDY: u32 = 512;
pub const PCRE_NOTEMPTY: u32 = 1024;
pub const PCRE_UTF8: u32 = 2048;
pub const PCRE_UTF16: u32 = 2048;
pub const PCRE_UTF32: u32 = 2048;
pub const PCRE_NO_AUTO_CAPTURE: u32 = 4096;
pub const PCRE_NO_UTF8_CHECK: u32 = 8192;
pub const PCRE_NO_UTF16_CHECK: u32 = 8192;
pub const PCRE_NO_UTF32_CHECK: u32 = 8192;
pub const PCRE_AUTO_CALLOUT: u32 = 16384;
pub const PCRE_PARTIAL_SOFT: u32 = 32768;
pub const PCRE_PARTIAL: u32 = 32768;
pub const PCRE_NEVER_UTF: u32 = 65536;
pub const PCRE_DFA_SHORTEST: u32 = 65536;
pub const PCRE_NO_AUTO_POSSESS: u32 = 131072;
pub const PCRE_DFA_RESTART: u32 = 131072;
pub const PCRE_FIRSTLINE: u32 = 262144;
pub const PCRE_DUPNAMES: u32 = 524288;
pub const PCRE_NEWLINE_CR: u32 = 1048576;
pub const PCRE_NEWLINE_LF: u32 = 2097152;
pub const PCRE_NEWLINE_CRLF: u32 = 3145728;
pub const PCRE_NEWLINE_ANY: u32 = 4194304;
pub const PCRE_NEWLINE_ANYCRLF: u32 = 5242880;
pub const PCRE_BSR_ANYCRLF: u32 = 8388608;
pub const PCRE_BSR_UNICODE: u32 = 16777216;
pub const PCRE_JAVASCRIPT_COMPAT: u32 = 33554432;
pub const PCRE_NO_START_OPTIMIZE: u32 = 67108864;
pub const PCRE_NO_START_OPTIMISE: u32 = 67108864;
pub const PCRE_PARTIAL_HARD: u32 = 134217728;
pub const PCRE_NOTEMPTY_ATSTART: u32 = 268435456;
pub const PCRE_UCP: u32 = 536870912;
pub const PCRE_ERROR_NOMATCH: i32 = -1;
pub const PCRE_ERROR_NULL: i32 = -2;
pub const PCRE_ERROR_BADOPTION: i32 = -3;
pub const PCRE_ERROR_BADMAGIC: i32 = -4;
pub const PCRE_ERROR_UNKNOWN_OPCODE: i32 = -5;
pub const PCRE_ERROR_UNKNOWN_NODE: i32 = -5;
pub const PCRE_ERROR_NOMEMORY: i32 = -6;
pub const PCRE_ERROR_NOSUBSTRING: i32 = -7;
pub const PCRE_ERROR_MATCHLIMIT: i32 = -8;
pub const PCRE_ERROR_CALLOUT: i32 = -9;
pub const PCRE_ERROR_BADUTF8: i32 = -10;
pub const PCRE_ERROR_BADUTF16: i32 = -10;
pub const PCRE_ERROR_BADUTF32: i32 = -10;
pub const PCRE_ERROR_BADUTF8_OFFSET: i32 = -11;
pub const PCRE_ERROR_BADUTF16_OFFSET: i32 = -11;
pub const PCRE_ERROR_PARTIAL: i32 = -12;
pub const PCRE_ERROR_BADPARTIAL: i32 = -13;
pub const PCRE_ERROR_INTERNAL: i32 = -14;
pub const PCRE_ERROR_BADCOUNT: i32 = -15;
pub const PCRE_ERROR_DFA_UITEM: i32 = -16;
pub const PCRE_ERROR_DFA_UCOND: i32 = -17;
pub const PCRE_ERROR_DFA_UMLIMIT: i32 = -18;
pub const PCRE_ERROR_DFA_WSSIZE: i32 = -19;
pub const PCRE_ERROR_DFA_RECURSE: i32 = -20;
pub const PCRE_ERROR_RECURSIONLIMIT: i32 = -21;
pub const PCRE_ERROR_NULLWSLIMIT: i32 = -22;
pub const PCRE_ERROR_BADNEWLINE: i32 = -23;
pub const PCRE_ERROR_BADOFFSET: i32 = -24;
pub const PCRE_ERROR_SHORTUTF8: i32 = -25;
pub const PCRE_ERROR_SHORTUTF16: i32 = -25;
pub const PCRE_ERROR_RECURSELOOP: i32 = -26;
pub const PCRE_ERROR_JIT_STACKLIMIT: i32 = -27;
pub const PCRE_ERROR_BADMODE: i32 = -28;
pub const PCRE_ERROR_BADENDIANNESS: i32 = -29;
pub const PCRE_ERROR_DFA_BADRESTART: i32 = -30;
pub const PCRE_ERROR_JIT_BADOPTION: i32 = -31;
pub const PCRE_ERROR_BADLENGTH: i32 = -32;
pub const PCRE_ERROR_UNSET: i32 = -33;
pub const PCRE_UTF8_ERR0: u32 = 0;
pub const PCRE_UTF8_ERR1: u32 = 1;
pub const PCRE_UTF8_ERR2: u32 = 2;
pub const PCRE_UTF8_ERR3: u32 = 3;
pub const PCRE_UTF8_ERR4: u32 = 4;
pub const PCRE_UTF8_ERR5: u32 = 5;
pub const PCRE_UTF8_ERR6: u32 = 6;
pub const PCRE_UTF8_ERR7: u32 = 7;
pub const PCRE_UTF8_ERR8: u32 = 8;
pub const PCRE_UTF8_ERR9: u32 = 9;
pub const PCRE_UTF8_ERR10: u32 = 10;
pub const PCRE_UTF8_ERR11: u32 = 11;
pub const PCRE_UTF8_ERR12: u32 = 12;
pub const PCRE_UTF8_ERR13: u32 = 13;
pub const PCRE_UTF8_ERR14: u32 = 14;
pub const PCRE_UTF8_ERR15: u32 = 15;
pub const PCRE_UTF8_ERR16: u32 = 16;
pub const PCRE_UTF8_ERR17: u32 = 17;
pub const PCRE_UTF8_ERR18: u32 = 18;
pub const PCRE_UTF8_ERR19: u32 = 19;
pub const PCRE_UTF8_ERR20: u32 = 20;
pub const PCRE_UTF8_ERR21: u32 = 21;
pub const PCRE_UTF8_ERR22: u32 = 22;
pub const PCRE_UTF16_ERR0: u32 = 0;
pub const PCRE_UTF16_ERR1: u32 = 1;
pub const PCRE_UTF16_ERR2: u32 = 2;
pub const PCRE_UTF16_ERR3: u32 = 3;
pub const PCRE_UTF16_ERR4: u32 = 4;
pub const PCRE_UTF32_ERR0: u32 = 0;
pub const PCRE_UTF32_ERR1: u32 = 1;
pub const PCRE_UTF32_ERR2: u32 = 2;
pub const PCRE_UTF32_ERR3: u32 = 3;
pub const PCRE_INFO_OPTIONS: u32 = 0;
pub const PCRE_INFO_SIZE: u32 = 1;
pub const PCRE_INFO_CAPTURECOUNT: u32 = 2;
pub const PCRE_INFO_BACKREFMAX: u32 = 3;
pub const PCRE_INFO_FIRSTBYTE: u32 = 4;
pub const PCRE_INFO_FIRSTCHAR: u32 = 4;
pub const PCRE_INFO_FIRSTTABLE: u32 = 5;
pub const PCRE_INFO_LASTLITERAL: u32 = 6;
pub const PCRE_INFO_NAMEENTRYSIZE: u32 = 7;
pub const PCRE_INFO_NAMECOUNT: u32 = 8;
pub const PCRE_INFO_NAMETABLE: u32 = 9;
pub const PCRE_INFO_STUDYSIZE: u32 = 10;
pub const PCRE_INFO_DEFAULT_TABLES: u32 = 11;
pub const PCRE_INFO_OKPARTIAL: u32 = 12;
pub const PCRE_INFO_JCHANGED: u32 = 13;
pub const PCRE_INFO_HASCRORLF: u32 = 14;
pub const PCRE_INFO_MINLENGTH: u32 = 15;
pub const PCRE_INFO_JIT: u32 = 16;
pub const PCRE_INFO_JITSIZE: u32 = 17;
pub const PCRE_INFO_MAXLOOKBEHIND: u32 = 18;
pub const PCRE_INFO_FIRSTCHARACTER: u32 = 19;
pub const PCRE_INFO_FIRSTCHARACTERFLAGS: u32 = 20;
pub const PCRE_INFO_REQUIREDCHAR: u32 = 21;
pub const PCRE_INFO_REQUIREDCHARFLAGS: u32 = 22;
pub const PCRE_INFO_MATCHLIMIT: u32 = 23;
pub const PCRE_INFO_RECURSIONLIMIT: u32 = 24;
pub const PCRE_INFO_MATCH_EMPTY: u32 = 25;
pub const PCRE_CONFIG_UTF8: u32 = 0;
pub const PCRE_CONFIG_NEWLINE: u32 = 1;
pub const PCRE_CONFIG_LINK_SIZE: u32 = 2;
pub const PCRE_CONFIG_POSIX_MALLOC_THRESHOLD: u32 = 3;
pub const PCRE_CONFIG_MATCH_LIMIT: u32 = 4;
pub const PCRE_CONFIG_STACKRECURSE: u32 = 5;
pub const PCRE_CONFIG_UNICODE_PROPERTIES: u32 = 6;
pub const PCRE_CONFIG_MATCH_LIMIT_RECURSION: u32 = 7;
pub const PCRE_CONFIG_BSR: u32 = 8;
pub const PCRE_CONFIG_JIT: u32 = 9;
pub const PCRE_CONFIG_UTF16: u32 = 10;
pub const PCRE_CONFIG_JITTARGET: u32 = 11;
pub const PCRE_CONFIG_UTF32: u32 = 12;
pub const PCRE_CONFIG_PARENS_LIMIT: u32 = 13;
pub const PCRE_STUDY_JIT_COMPILE: u32 = 1;
pub const PCRE_STUDY_JIT_PARTIAL_SOFT_COMPILE: u32 = 2;
pub const PCRE_STUDY_JIT_PARTIAL_HARD_COMPILE: u32 = 4;
pub const PCRE_STUDY_EXTRA_NEEDED: u32 = 8;
pub const PCRE_EXTRA_STUDY_DATA: u32 = 1;
pub const PCRE_EXTRA_MATCH_LIMIT: u32 = 2;
pub const PCRE_EXTRA_CALLOUT_DATA: u32 = 4;
pub const PCRE_EXTRA_TABLES: u32 = 8;
pub const PCRE_EXTRA_MATCH_LIMIT_RECURSION: u32 = 16;
pub const PCRE_EXTRA_MARK: u32 = 32;
pub const PCRE_EXTRA_EXECUTABLE_JIT: u32 = 64;
pub const DEFAULT_AFTER_LEN: u32 = 2;
pub const DEFAULT_BEFORE_LEN: u32 = 2;
pub const DEFAULT_CONTEXT_LEN: u32 = 2;
pub const DEFAULT_MAX_SEARCH_DEPTH: u32 = 25;
pub const _DIRENT_H: u32 = 1;
pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const MAXNAMLEN: u32 = 255;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _SYS_TIME_H: u32 = 1;
pub const HAVE_ERR_H: u32 = 1;
pub const HAVE_FOPENCOOKIE: u32 = 1;
pub const HAVE_GETLINE: u32 = 1;
pub const HAVE_INTTYPES_H: u32 = 1;
pub const HAVE_LZMA_H: u32 = 1;
pub const HAVE_MADVISE: u32 = 1;
pub const HAVE_MEMORY_H: u32 = 1;
pub const HAVE_POSIX_FADVISE: u32 = 1;
pub const HAVE_PTHREAD_H: u32 = 1;
pub const HAVE_PTHREAD_PRIO_INHERIT: u32 = 1;
pub const HAVE_PTHREAD_SETAFFINITY_NP: u32 = 1;
pub const HAVE_REALPATH: u32 = 1;
pub const HAVE_STDINT_H: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const HAVE_STRINGS_H: u32 = 1;
pub const HAVE_STRING_H: u32 = 1;
pub const HAVE_STRNDUP: u32 = 1;
pub const HAVE_SYS_STAT_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const HAVE_VASPRINTF: u32 = 1;
pub const HAVE_ZLIB_H: u32 = 1;
pub const PACKAGE_BUGREPORT: &'static [u8; 53usize] =
    b"https://github.com/ggreer/the_silver_searcher/issues\0";
pub const PACKAGE_NAME: &'static [u8; 20usize] = b"the_silver_searcher\0";
pub const PACKAGE_STRING: &'static [u8; 26usize] = b"the_silver_searcher 2.2.0\0";
pub const PACKAGE_TARNAME: &'static [u8; 20usize] = b"the_silver_searcher\0";
pub const PACKAGE_URL: &'static [u8; 46usize] = b"https://github.com/ggreer/the_silver_searcher\0";
pub const PACKAGE_VERSION: &'static [u8; 6usize] = b"2.2.0\0";
pub const STDC_HEADERS: u32 = 1;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const H_SIZE: u32 = 65536;
extern "C" {
    pub static mut optarg: *mut cty::c_char;
}
extern "C" {
    pub static mut optind: cty::c_int;
}
extern "C" {
    pub static mut opterr: cty::c_int;
}
extern "C" {
    pub static mut optopt: cty::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: cty::c_int,
        ___argv: *const *mut cty::c_char,
        __shortopts: *const cty::c_char,
    ) -> cty::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct option {
    pub name: *const cty::c_char,
    pub has_arg: cty::c_int,
    pub flag: *mut cty::c_int,
    pub val: cty::c_int,
}
#[test]
fn bindgen_test_layout_option() {
    assert_eq!(
        ::std::mem::size_of::<option>(),
        32usize,
        concat!("Size of: ", stringify!(option))
    );
    assert_eq!(
        ::std::mem::align_of::<option>(),
        8usize,
        concat!("Alignment of ", stringify!(option))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option>())).has_arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(has_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option>())).flag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<option>())).val as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(option),
            "::",
            stringify!(val)
        )
    );
}
extern "C" {
    pub fn getopt_long(
        ___argc: cty::c_int,
        ___argv: *const *mut cty::c_char,
        __shortopts: *const cty::c_char,
        __longopts: *const option,
        __longind: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn getopt_long_only(
        ___argc: cty::c_int,
        ___argv: *const *mut cty::c_char,
        __shortopts: *const cty::c_char,
        __longopts: *const option,
        __longind: *mut cty::c_int,
    ) -> cty::c_int;
}
pub type __u_char = cty::c_uchar;
pub type __u_short = cty::c_ushort;
pub type __u_int = cty::c_uint;
pub type __u_long = cty::c_ulong;
pub type __int8_t = cty::c_schar;
pub type __uint8_t = cty::c_uchar;
pub type __int16_t = cty::c_short;
pub type __uint16_t = cty::c_ushort;
pub type __int32_t = cty::c_int;
pub type __uint32_t = cty::c_uint;
pub type __int64_t = cty::c_long;
pub type __uint64_t = cty::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = cty::c_long;
pub type __u_quad_t = cty::c_ulong;
pub type __intmax_t = cty::c_long;
pub type __uintmax_t = cty::c_ulong;
pub type __dev_t = cty::c_ulong;
pub type __uid_t = cty::c_uint;
pub type __gid_t = cty::c_uint;
pub type __ino_t = cty::c_ulong;
pub type __ino64_t = cty::c_ulong;
pub type __mode_t = cty::c_uint;
pub type __nlink_t = cty::c_ulong;
pub type __off_t = cty::c_long;
pub type __off64_t = cty::c_long;
pub type __pid_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [cty::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = cty::c_long;
pub type __rlim_t = cty::c_ulong;
pub type __rlim64_t = cty::c_ulong;
pub type __id_t = cty::c_uint;
pub type __time_t = cty::c_long;
pub type __useconds_t = cty::c_uint;
pub type __suseconds_t = cty::c_long;
pub type __suseconds64_t = cty::c_long;
pub type __daddr_t = cty::c_int;
pub type __key_t = cty::c_int;
pub type __clockid_t = cty::c_int;
pub type __timer_t = *mut cty::c_void;
pub type __blksize_t = cty::c_long;
pub type __blkcnt_t = cty::c_long;
pub type __blkcnt64_t = cty::c_long;
pub type __fsblkcnt_t = cty::c_ulong;
pub type __fsblkcnt64_t = cty::c_ulong;
pub type __fsfilcnt_t = cty::c_ulong;
pub type __fsfilcnt64_t = cty::c_ulong;
pub type __fsword_t = cty::c_long;
pub type __ssize_t = cty::c_long;
pub type __syscall_slong_t = cty::c_long;
pub type __syscall_ulong_t = cty::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut cty::c_char;
pub type __intptr_t = cty::c_long;
pub type __socklen_t = cty::c_uint;
pub type __sig_atomic_t = cty::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type time_t = __time_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type ino_t = __ino_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type off_t = __off_t;
pub type uid_t = __uid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: cty::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn stat(__file: *const cty::c_char, __buf: *mut stat) -> cty::c_int;
}
extern "C" {
    pub fn fstat(__fd: cty::c_int, __buf: *mut stat) -> cty::c_int;
}
extern "C" {
    pub fn fstatat(
        __fd: cty::c_int,
        __file: *const cty::c_char,
        __buf: *mut stat,
        __flag: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn lstat(__file: *const cty::c_char, __buf: *mut stat) -> cty::c_int;
}
extern "C" {
    pub fn chmod(__file: *const cty::c_char, __mode: __mode_t) -> cty::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const cty::c_char, __mode: __mode_t) -> cty::c_int;
}
extern "C" {
    pub fn fchmod(__fd: cty::c_int, __mode: __mode_t) -> cty::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: cty::c_int,
        __file: *const cty::c_char,
        __mode: __mode_t,
        __flag: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const cty::c_char, __mode: __mode_t) -> cty::c_int;
}
extern "C" {
    pub fn mkdirat(__fd: cty::c_int, __path: *const cty::c_char, __mode: __mode_t) -> cty::c_int;
}
extern "C" {
    pub fn mknod(__path: *const cty::c_char, __mode: __mode_t, __dev: __dev_t) -> cty::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: cty::c_int,
        __path: *const cty::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const cty::c_char, __mode: __mode_t) -> cty::c_int;
}
extern "C" {
    pub fn mkfifoat(__fd: cty::c_int, __path: *const cty::c_char, __mode: __mode_t) -> cty::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: cty::c_int,
        __path: *const cty::c_char,
        __times: *const timespec,
        __flags: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn futimens(__fd: cty::c_int, __times: *const timespec) -> cty::c_int;
}
extern "C" {
    pub fn __fxstat(__ver: cty::c_int, __fildes: cty::c_int, __stat_buf: *mut stat) -> cty::c_int;
}
extern "C" {
    pub fn __xstat(
        __ver: cty::c_int,
        __filename: *const cty::c_char,
        __stat_buf: *mut stat,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __lxstat(
        __ver: cty::c_int,
        __filename: *const cty::c_char,
        __stat_buf: *mut stat,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __fxstatat(
        __ver: cty::c_int,
        __fildes: cty::c_int,
        __filename: *const cty::c_char,
        __stat_buf: *mut stat,
        __flag: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __xmknod(
        __ver: cty::c_int,
        __path: *const cty::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn __xmknodat(
        __ver: cty::c_int,
        __fd: cty::c_int,
        __path: *const cty::c_char,
        __mode: __mode_t,
        __dev: *mut __dev_t,
    ) -> cty::c_int;
}
pub type size_t = cty::c_ulong;
pub type wchar_t = cty::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: cty::c_int,
    pub rem: cty::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: cty::c_long,
    pub rem: cty::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: cty::c_longlong,
    pub rem: cty::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const cty::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const cty::c_char) -> cty::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const cty::c_char) -> cty::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const cty::c_char, __endptr: *mut *mut cty::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const cty::c_char, __endptr: *mut *mut cty::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const cty::c_char, __endptr: *mut *mut cty::c_char) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const cty::c_char,
        __endptr: *mut *mut cty::c_char,
        __base: cty::c_int,
    ) -> cty::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const cty::c_char,
        __endptr: *mut *mut cty::c_char,
        __base: cty::c_int,
    ) -> cty::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const cty::c_char,
        __endptr: *mut *mut cty::c_char,
        __base: cty::c_int,
    ) -> cty::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const cty::c_char,
        __endptr: *mut *mut cty::c_char,
        __base: cty::c_int,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const cty::c_char,
        __endptr: *mut *mut cty::c_char,
        __base: cty::c_int,
    ) -> cty::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const cty::c_char,
        __endptr: *mut *mut cty::c_char,
        __base: cty::c_int,
    ) -> cty::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: cty::c_long) -> *mut cty::c_char;
}
extern "C" {
    pub fn a64l(__s: *const cty::c_char) -> cty::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = cty::c_ulong;
pub type ushort = cty::c_ushort;
pub type uint = cty::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = cty::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [cty::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = cty::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: cty::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: cty::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> cty::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: cty::c_int,
    pub __count: cty::c_uint,
    pub __owner: cty::c_int,
    pub __nusers: cty::c_uint,
    pub __kind: cty::c_int,
    pub __spins: cty::c_short,
    pub __elision: cty::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: cty::c_uint,
    pub __writers: cty::c_uint,
    pub __wrphase_futex: cty::c_uint,
    pub __writers_futex: cty::c_uint,
    pub __pad3: cty::c_uint,
    pub __pad4: cty::c_uint,
    pub __cur_writer: cty::c_int,
    pub __shared: cty::c_int,
    pub __rwelision: cty::c_schar,
    pub __pad1: [cty::c_uchar; 7usize],
    pub __pad2: cty::c_ulong,
    pub __flags: cty::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [cty::c_uint; 2usize],
    pub __g_size: [cty::c_uint; 2usize],
    pub __g1_orig_size: cty::c_uint,
    pub __wrefs: cty::c_uint,
    pub __g_signals: [cty::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: cty::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: cty::c_uint,
    pub __high: cty::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: cty::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: cty::c_uint,
    pub __high: cty::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = cty::c_uint;
pub type __thrd_t = cty::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: cty::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__once_flag>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = cty::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [cty::c_char; 4usize],
    pub __align: cty::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [cty::c_char; 4usize],
    pub __align: cty::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = cty::c_uint;
pub type pthread_once_t = cty::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [cty::c_char; 56usize],
    pub __align: cty::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [cty::c_char; 40usize],
    pub __align: cty::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [cty::c_char; 48usize],
    pub __align: cty::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [cty::c_char; 56usize],
    pub __align: cty::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [cty::c_char; 8usize],
    pub __align: cty::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = cty::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [cty::c_char; 32usize],
    pub __align: cty::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [cty::c_char; 4usize],
    pub __align: cty::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> cty::c_long;
}
extern "C" {
    pub fn srandom(__seed: cty::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: cty::c_uint,
        __statebuf: *mut cty::c_char,
        __statelen: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut cty::c_char) -> *mut cty::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: cty::c_int,
    pub rand_deg: cty::c_int,
    pub rand_sep: cty::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> cty::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: cty::c_uint, __buf: *mut random_data) -> cty::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: cty::c_uint,
        __statebuf: *mut cty::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> cty::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut cty::c_char, __buf: *mut random_data) -> cty::c_int;
}
extern "C" {
    pub fn rand() -> cty::c_int;
}
extern "C" {
    pub fn srand(__seed: cty::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut cty::c_uint) -> cty::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut cty::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> cty::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut cty::c_ushort) -> cty::c_long;
}
extern "C" {
    pub fn mrand48() -> cty::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut cty::c_ushort) -> cty::c_long;
}
extern "C" {
    pub fn srand48(__seedval: cty::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut cty::c_ushort) -> *mut cty::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut cty::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [cty::c_ushort; 3usize],
    pub __old_x: [cty::c_ushort; 3usize],
    pub __c: cty::c_ushort,
    pub __init: cty::c_ushort,
    pub __a: cty::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> cty::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut cty::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> cty::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data, __result: *mut cty::c_long) -> cty::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut cty::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut cty::c_long,
    ) -> cty::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data, __result: *mut cty::c_long) -> cty::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut cty::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut cty::c_long,
    ) -> cty::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: cty::c_long, __buffer: *mut drand48_data) -> cty::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut cty::c_ushort, __buffer: *mut drand48_data) -> cty::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut cty::c_ushort, __buffer: *mut drand48_data) -> cty::c_int;
}
extern "C" {
    pub fn malloc(__size: cty::c_ulong) -> *mut cty::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: cty::c_ulong, __size: cty::c_ulong) -> *mut cty::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut cty::c_void, __size: cty::c_ulong) -> *mut cty::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut cty::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut cty::c_void);
}
extern "C" {
    pub fn alloca(__size: cty::c_ulong) -> *mut cty::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut cty::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> cty::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> cty::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(__status: cty::c_int, __arg: *mut cty::c_void),
        >,
        __arg: *mut cty::c_void,
    ) -> cty::c_int;
}
extern "C" {
    pub fn exit(__status: cty::c_int);
}
extern "C" {
    pub fn quick_exit(__status: cty::c_int);
}
extern "C" {
    pub fn _Exit(__status: cty::c_int);
}
extern "C" {
    pub fn getenv(__name: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const cty::c_char,
        __value: *const cty::c_char,
        __replace: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn clearenv() -> cty::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut cty::c_char, __suffixlen: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn system(__command: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn realpath(__name: *const cty::c_char, __resolved: *mut cty::c_char) -> *mut cty::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const cty::c_void, arg2: *const cty::c_void) -> cty::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const cty::c_void,
        __base: *const cty::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut cty::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn labs(__x: cty::c_long) -> cty::c_long;
}
extern "C" {
    pub fn llabs(__x: cty::c_longlong) -> cty::c_longlong;
}
extern "C" {
    pub fn div(__numer: cty::c_int, __denom: cty::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: cty::c_long, __denom: cty::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: cty::c_longlong, __denom: cty::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: cty::c_int,
        __decpt: *mut cty::c_int,
        __sign: *mut cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: cty::c_int,
        __decpt: *mut cty::c_int,
        __sign: *mut cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn gcvt(__value: f64, __ndigit: cty::c_int, __buf: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: cty::c_int,
        __decpt: *mut cty::c_int,
        __sign: *mut cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: cty::c_int,
        __decpt: *mut cty::c_int,
        __sign: *mut cty::c_int,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn qgcvt(__value: u128, __ndigit: cty::c_int, __buf: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: cty::c_int,
        __decpt: *mut cty::c_int,
        __sign: *mut cty::c_int,
        __buf: *mut cty::c_char,
        __len: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: cty::c_int,
        __decpt: *mut cty::c_int,
        __sign: *mut cty::c_int,
        __buf: *mut cty::c_char,
        __len: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: cty::c_int,
        __decpt: *mut cty::c_int,
        __sign: *mut cty::c_int,
        __buf: *mut cty::c_char,
        __len: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: cty::c_int,
        __decpt: *mut cty::c_int,
        __sign: *mut cty::c_int,
        __buf: *mut cty::c_char,
        __len: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn mblen(__s: *const cty::c_char, __n: size_t) -> cty::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const cty::c_char, __n: size_t) -> cty::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut cty::c_char, __wchar: wchar_t) -> cty::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const cty::c_char, __n: size_t) -> size_t;
}
extern "C" {
    pub fn wcstombs(__s: *mut cty::c_char, __pwcs: *const wchar_t, __n: size_t) -> size_t;
}
extern "C" {
    pub fn rpmatch(__response: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut cty::c_char,
        __tokens: *const *mut cty::c_char,
        __valuep: *mut *mut cty::c_char,
    ) -> cty::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: cty::c_int) -> cty::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct real_pcre8_or_16 {
    _unused: [u8; 0],
}
pub type pcre = real_pcre8_or_16;
pub type pcre16 = real_pcre8_or_16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct real_pcre32 {
    _unused: [u8; 0],
}
pub type pcre32 = real_pcre32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct real_pcre_jit_stack {
    _unused: [u8; 0],
}
pub type pcre_jit_stack = real_pcre_jit_stack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct real_pcre16_jit_stack {
    _unused: [u8; 0],
}
pub type pcre16_jit_stack = real_pcre16_jit_stack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct real_pcre32_jit_stack {
    _unused: [u8; 0],
}
pub type pcre32_jit_stack = real_pcre32_jit_stack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre_extra {
    pub flags: cty::c_ulong,
    pub study_data: *mut cty::c_void,
    pub match_limit: cty::c_ulong,
    pub callout_data: *mut cty::c_void,
    pub tables: *const cty::c_uchar,
    pub match_limit_recursion: cty::c_ulong,
    pub mark: *mut *mut cty::c_uchar,
    pub executable_jit: *mut cty::c_void,
}
#[test]
fn bindgen_test_layout_pcre_extra() {
    assert_eq!(
        ::std::mem::size_of::<pcre_extra>(),
        64usize,
        concat!("Size of: ", stringify!(pcre_extra))
    );
    assert_eq!(
        ::std::mem::align_of::<pcre_extra>(),
        8usize,
        concat!("Alignment of ", stringify!(pcre_extra))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_extra>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_extra),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_extra>())).study_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_extra),
            "::",
            stringify!(study_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_extra>())).match_limit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_extra),
            "::",
            stringify!(match_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_extra>())).callout_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_extra),
            "::",
            stringify!(callout_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_extra>())).tables as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_extra),
            "::",
            stringify!(tables)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre_extra>())).match_limit_recursion as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_extra),
            "::",
            stringify!(match_limit_recursion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_extra>())).mark as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_extra),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_extra>())).executable_jit as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_extra),
            "::",
            stringify!(executable_jit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre16_extra {
    pub flags: cty::c_ulong,
    pub study_data: *mut cty::c_void,
    pub match_limit: cty::c_ulong,
    pub callout_data: *mut cty::c_void,
    pub tables: *const cty::c_uchar,
    pub match_limit_recursion: cty::c_ulong,
    pub mark: *mut *mut cty::c_ushort,
    pub executable_jit: *mut cty::c_void,
}
#[test]
fn bindgen_test_layout_pcre16_extra() {
    assert_eq!(
        ::std::mem::size_of::<pcre16_extra>(),
        64usize,
        concat!("Size of: ", stringify!(pcre16_extra))
    );
    assert_eq!(
        ::std::mem::align_of::<pcre16_extra>(),
        8usize,
        concat!("Alignment of ", stringify!(pcre16_extra))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre16_extra>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_extra),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre16_extra>())).study_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_extra),
            "::",
            stringify!(study_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre16_extra>())).match_limit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_extra),
            "::",
            stringify!(match_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre16_extra>())).callout_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_extra),
            "::",
            stringify!(callout_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre16_extra>())).tables as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_extra),
            "::",
            stringify!(tables)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre16_extra>())).match_limit_recursion as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_extra),
            "::",
            stringify!(match_limit_recursion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre16_extra>())).mark as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_extra),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre16_extra>())).executable_jit as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_extra),
            "::",
            stringify!(executable_jit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre32_extra {
    pub flags: cty::c_ulong,
    pub study_data: *mut cty::c_void,
    pub match_limit: cty::c_ulong,
    pub callout_data: *mut cty::c_void,
    pub tables: *const cty::c_uchar,
    pub match_limit_recursion: cty::c_ulong,
    pub mark: *mut *mut cty::c_uint,
    pub executable_jit: *mut cty::c_void,
}
#[test]
fn bindgen_test_layout_pcre32_extra() {
    assert_eq!(
        ::std::mem::size_of::<pcre32_extra>(),
        64usize,
        concat!("Size of: ", stringify!(pcre32_extra))
    );
    assert_eq!(
        ::std::mem::align_of::<pcre32_extra>(),
        8usize,
        concat!("Alignment of ", stringify!(pcre32_extra))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre32_extra>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_extra),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre32_extra>())).study_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_extra),
            "::",
            stringify!(study_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre32_extra>())).match_limit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_extra),
            "::",
            stringify!(match_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre32_extra>())).callout_data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_extra),
            "::",
            stringify!(callout_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre32_extra>())).tables as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_extra),
            "::",
            stringify!(tables)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre32_extra>())).match_limit_recursion as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_extra),
            "::",
            stringify!(match_limit_recursion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre32_extra>())).mark as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_extra),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre32_extra>())).executable_jit as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_extra),
            "::",
            stringify!(executable_jit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre_callout_block {
    pub version: cty::c_int,
    pub callout_number: cty::c_int,
    pub offset_vector: *mut cty::c_int,
    pub subject: *const cty::c_char,
    pub subject_length: cty::c_int,
    pub start_match: cty::c_int,
    pub current_position: cty::c_int,
    pub capture_top: cty::c_int,
    pub capture_last: cty::c_int,
    pub callout_data: *mut cty::c_void,
    pub pattern_position: cty::c_int,
    pub next_item_length: cty::c_int,
    pub mark: *const cty::c_uchar,
}
#[test]
fn bindgen_test_layout_pcre_callout_block() {
    assert_eq!(
        ::std::mem::size_of::<pcre_callout_block>(),
        72usize,
        concat!("Size of: ", stringify!(pcre_callout_block))
    );
    assert_eq!(
        ::std::mem::align_of::<pcre_callout_block>(),
        8usize,
        concat!("Alignment of ", stringify!(pcre_callout_block))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_callout_block>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_callout_block),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre_callout_block>())).callout_number as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_callout_block),
            "::",
            stringify!(callout_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre_callout_block>())).offset_vector as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_callout_block),
            "::",
            stringify!(offset_vector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_callout_block>())).subject as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_callout_block),
            "::",
            stringify!(subject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre_callout_block>())).subject_length as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_callout_block),
            "::",
            stringify!(subject_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_callout_block>())).start_match as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_callout_block),
            "::",
            stringify!(start_match)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre_callout_block>())).current_position as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_callout_block),
            "::",
            stringify!(current_position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_callout_block>())).capture_top as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_callout_block),
            "::",
            stringify!(capture_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_callout_block>())).capture_last as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_callout_block),
            "::",
            stringify!(capture_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_callout_block>())).callout_data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_callout_block),
            "::",
            stringify!(callout_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre_callout_block>())).pattern_position as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_callout_block),
            "::",
            stringify!(pattern_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre_callout_block>())).next_item_length as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_callout_block),
            "::",
            stringify!(next_item_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre_callout_block>())).mark as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre_callout_block),
            "::",
            stringify!(mark)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre16_callout_block {
    pub version: cty::c_int,
    pub callout_number: cty::c_int,
    pub offset_vector: *mut cty::c_int,
    pub subject: *const cty::c_ushort,
    pub subject_length: cty::c_int,
    pub start_match: cty::c_int,
    pub current_position: cty::c_int,
    pub capture_top: cty::c_int,
    pub capture_last: cty::c_int,
    pub callout_data: *mut cty::c_void,
    pub pattern_position: cty::c_int,
    pub next_item_length: cty::c_int,
    pub mark: *const cty::c_ushort,
}
#[test]
fn bindgen_test_layout_pcre16_callout_block() {
    assert_eq!(
        ::std::mem::size_of::<pcre16_callout_block>(),
        72usize,
        concat!("Size of: ", stringify!(pcre16_callout_block))
    );
    assert_eq!(
        ::std::mem::align_of::<pcre16_callout_block>(),
        8usize,
        concat!("Alignment of ", stringify!(pcre16_callout_block))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre16_callout_block>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_callout_block),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre16_callout_block>())).callout_number as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_callout_block),
            "::",
            stringify!(callout_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre16_callout_block>())).offset_vector as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_callout_block),
            "::",
            stringify!(offset_vector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre16_callout_block>())).subject as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_callout_block),
            "::",
            stringify!(subject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre16_callout_block>())).subject_length as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_callout_block),
            "::",
            stringify!(subject_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre16_callout_block>())).start_match as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_callout_block),
            "::",
            stringify!(start_match)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre16_callout_block>())).current_position as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_callout_block),
            "::",
            stringify!(current_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre16_callout_block>())).capture_top as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_callout_block),
            "::",
            stringify!(capture_top)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre16_callout_block>())).capture_last as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_callout_block),
            "::",
            stringify!(capture_last)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre16_callout_block>())).callout_data as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_callout_block),
            "::",
            stringify!(callout_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre16_callout_block>())).pattern_position as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_callout_block),
            "::",
            stringify!(pattern_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre16_callout_block>())).next_item_length as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_callout_block),
            "::",
            stringify!(next_item_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre16_callout_block>())).mark as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre16_callout_block),
            "::",
            stringify!(mark)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcre32_callout_block {
    pub version: cty::c_int,
    pub callout_number: cty::c_int,
    pub offset_vector: *mut cty::c_int,
    pub subject: *const cty::c_uint,
    pub subject_length: cty::c_int,
    pub start_match: cty::c_int,
    pub current_position: cty::c_int,
    pub capture_top: cty::c_int,
    pub capture_last: cty::c_int,
    pub callout_data: *mut cty::c_void,
    pub pattern_position: cty::c_int,
    pub next_item_length: cty::c_int,
    pub mark: *const cty::c_uint,
}
#[test]
fn bindgen_test_layout_pcre32_callout_block() {
    assert_eq!(
        ::std::mem::size_of::<pcre32_callout_block>(),
        72usize,
        concat!("Size of: ", stringify!(pcre32_callout_block))
    );
    assert_eq!(
        ::std::mem::align_of::<pcre32_callout_block>(),
        8usize,
        concat!("Alignment of ", stringify!(pcre32_callout_block))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre32_callout_block>())).version as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_callout_block),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre32_callout_block>())).callout_number as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_callout_block),
            "::",
            stringify!(callout_number)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre32_callout_block>())).offset_vector as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_callout_block),
            "::",
            stringify!(offset_vector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre32_callout_block>())).subject as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_callout_block),
            "::",
            stringify!(subject)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre32_callout_block>())).subject_length as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_callout_block),
            "::",
            stringify!(subject_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre32_callout_block>())).start_match as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_callout_block),
            "::",
            stringify!(start_match)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre32_callout_block>())).current_position as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_callout_block),
            "::",
            stringify!(current_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre32_callout_block>())).capture_top as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_callout_block),
            "::",
            stringify!(capture_top)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre32_callout_block>())).capture_last as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_callout_block),
            "::",
            stringify!(capture_last)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre32_callout_block>())).callout_data as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_callout_block),
            "::",
            stringify!(callout_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre32_callout_block>())).pattern_position as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_callout_block),
            "::",
            stringify!(pattern_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pcre32_callout_block>())).next_item_length as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_callout_block),
            "::",
            stringify!(next_item_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pcre32_callout_block>())).mark as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(pcre32_callout_block),
            "::",
            stringify!(mark)
        )
    );
}
extern "C" {
    pub static mut pcre_malloc:
        ::std::option::Option<unsafe extern "C" fn(arg1: size_t) -> *mut cty::c_void>;
}
extern "C" {
    pub static mut pcre_free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>;
}
extern "C" {
    pub static mut pcre_stack_malloc:
        ::std::option::Option<unsafe extern "C" fn(arg1: size_t) -> *mut cty::c_void>;
}
extern "C" {
    pub static mut pcre_stack_free:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>;
}
extern "C" {
    pub static mut pcre_callout:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pcre_callout_block) -> cty::c_int>;
}
extern "C" {
    pub static mut pcre_stack_guard: ::std::option::Option<unsafe extern "C" fn() -> cty::c_int>;
}
extern "C" {
    pub static mut pcre16_malloc:
        ::std::option::Option<unsafe extern "C" fn(arg1: size_t) -> *mut cty::c_void>;
}
extern "C" {
    pub static mut pcre16_free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>;
}
extern "C" {
    pub static mut pcre16_stack_malloc:
        ::std::option::Option<unsafe extern "C" fn(arg1: size_t) -> *mut cty::c_void>;
}
extern "C" {
    pub static mut pcre16_stack_free:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>;
}
extern "C" {
    pub static mut pcre16_callout:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pcre16_callout_block) -> cty::c_int>;
}
extern "C" {
    pub static mut pcre16_stack_guard: ::std::option::Option<unsafe extern "C" fn() -> cty::c_int>;
}
extern "C" {
    pub static mut pcre32_malloc:
        ::std::option::Option<unsafe extern "C" fn(arg1: size_t) -> *mut cty::c_void>;
}
extern "C" {
    pub static mut pcre32_free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>;
}
extern "C" {
    pub static mut pcre32_stack_malloc:
        ::std::option::Option<unsafe extern "C" fn(arg1: size_t) -> *mut cty::c_void>;
}
extern "C" {
    pub static mut pcre32_stack_free:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>;
}
extern "C" {
    pub static mut pcre32_callout:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut pcre32_callout_block) -> cty::c_int>;
}
extern "C" {
    pub static mut pcre32_stack_guard: ::std::option::Option<unsafe extern "C" fn() -> cty::c_int>;
}
pub type pcre_jit_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void) -> *mut pcre_jit_stack>;
pub type pcre16_jit_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void) -> *mut pcre16_jit_stack>;
pub type pcre32_jit_callback =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void) -> *mut pcre32_jit_stack>;
extern "C" {
    pub fn pcre_compile(
        arg1: *const cty::c_char,
        arg2: cty::c_int,
        arg3: *mut *const cty::c_char,
        arg4: *mut cty::c_int,
        arg5: *const cty::c_uchar,
    ) -> *mut pcre;
}
extern "C" {
    pub fn pcre16_compile(
        arg1: *const cty::c_ushort,
        arg2: cty::c_int,
        arg3: *mut *const cty::c_char,
        arg4: *mut cty::c_int,
        arg5: *const cty::c_uchar,
    ) -> *mut pcre16;
}
extern "C" {
    pub fn pcre32_compile(
        arg1: *const cty::c_uint,
        arg2: cty::c_int,
        arg3: *mut *const cty::c_char,
        arg4: *mut cty::c_int,
        arg5: *const cty::c_uchar,
    ) -> *mut pcre32;
}
extern "C" {
    pub fn pcre_compile2(
        arg1: *const cty::c_char,
        arg2: cty::c_int,
        arg3: *mut cty::c_int,
        arg4: *mut *const cty::c_char,
        arg5: *mut cty::c_int,
        arg6: *const cty::c_uchar,
    ) -> *mut pcre;
}
extern "C" {
    pub fn pcre16_compile2(
        arg1: *const cty::c_ushort,
        arg2: cty::c_int,
        arg3: *mut cty::c_int,
        arg4: *mut *const cty::c_char,
        arg5: *mut cty::c_int,
        arg6: *const cty::c_uchar,
    ) -> *mut pcre16;
}
extern "C" {
    pub fn pcre32_compile2(
        arg1: *const cty::c_uint,
        arg2: cty::c_int,
        arg3: *mut cty::c_int,
        arg4: *mut *const cty::c_char,
        arg5: *mut cty::c_int,
        arg6: *const cty::c_uchar,
    ) -> *mut pcre32;
}
extern "C" {
    pub fn pcre_config(arg1: cty::c_int, arg2: *mut cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_config(arg1: cty::c_int, arg2: *mut cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_config(arg1: cty::c_int, arg2: *mut cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn pcre_copy_named_substring(
        arg1: *const pcre,
        arg2: *const cty::c_char,
        arg3: *mut cty::c_int,
        arg4: cty::c_int,
        arg5: *const cty::c_char,
        arg6: *mut cty::c_char,
        arg7: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_copy_named_substring(
        arg1: *const pcre16,
        arg2: *const cty::c_ushort,
        arg3: *mut cty::c_int,
        arg4: cty::c_int,
        arg5: *const cty::c_ushort,
        arg6: *mut cty::c_ushort,
        arg7: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_copy_named_substring(
        arg1: *const pcre32,
        arg2: *const cty::c_uint,
        arg3: *mut cty::c_int,
        arg4: cty::c_int,
        arg5: *const cty::c_uint,
        arg6: *mut cty::c_uint,
        arg7: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre_copy_substring(
        arg1: *const cty::c_char,
        arg2: *mut cty::c_int,
        arg3: cty::c_int,
        arg4: cty::c_int,
        arg5: *mut cty::c_char,
        arg6: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_copy_substring(
        arg1: *const cty::c_ushort,
        arg2: *mut cty::c_int,
        arg3: cty::c_int,
        arg4: cty::c_int,
        arg5: *mut cty::c_ushort,
        arg6: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_copy_substring(
        arg1: *const cty::c_uint,
        arg2: *mut cty::c_int,
        arg3: cty::c_int,
        arg4: cty::c_int,
        arg5: *mut cty::c_uint,
        arg6: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre_dfa_exec(
        arg1: *const pcre,
        arg2: *const pcre_extra,
        arg3: *const cty::c_char,
        arg4: cty::c_int,
        arg5: cty::c_int,
        arg6: cty::c_int,
        arg7: *mut cty::c_int,
        arg8: cty::c_int,
        arg9: *mut cty::c_int,
        arg10: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_dfa_exec(
        arg1: *const pcre16,
        arg2: *const pcre16_extra,
        arg3: *const cty::c_ushort,
        arg4: cty::c_int,
        arg5: cty::c_int,
        arg6: cty::c_int,
        arg7: *mut cty::c_int,
        arg8: cty::c_int,
        arg9: *mut cty::c_int,
        arg10: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_dfa_exec(
        arg1: *const pcre32,
        arg2: *const pcre32_extra,
        arg3: *const cty::c_uint,
        arg4: cty::c_int,
        arg5: cty::c_int,
        arg6: cty::c_int,
        arg7: *mut cty::c_int,
        arg8: cty::c_int,
        arg9: *mut cty::c_int,
        arg10: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre_exec(
        arg1: *const pcre,
        arg2: *const pcre_extra,
        arg3: *const cty::c_char,
        arg4: cty::c_int,
        arg5: cty::c_int,
        arg6: cty::c_int,
        arg7: *mut cty::c_int,
        arg8: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_exec(
        arg1: *const pcre16,
        arg2: *const pcre16_extra,
        arg3: *const cty::c_ushort,
        arg4: cty::c_int,
        arg5: cty::c_int,
        arg6: cty::c_int,
        arg7: *mut cty::c_int,
        arg8: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_exec(
        arg1: *const pcre32,
        arg2: *const pcre32_extra,
        arg3: *const cty::c_uint,
        arg4: cty::c_int,
        arg5: cty::c_int,
        arg6: cty::c_int,
        arg7: *mut cty::c_int,
        arg8: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre_jit_exec(
        arg1: *const pcre,
        arg2: *const pcre_extra,
        arg3: *const cty::c_char,
        arg4: cty::c_int,
        arg5: cty::c_int,
        arg6: cty::c_int,
        arg7: *mut cty::c_int,
        arg8: cty::c_int,
        arg9: *mut pcre_jit_stack,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_jit_exec(
        arg1: *const pcre16,
        arg2: *const pcre16_extra,
        arg3: *const cty::c_ushort,
        arg4: cty::c_int,
        arg5: cty::c_int,
        arg6: cty::c_int,
        arg7: *mut cty::c_int,
        arg8: cty::c_int,
        arg9: *mut pcre16_jit_stack,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_jit_exec(
        arg1: *const pcre32,
        arg2: *const pcre32_extra,
        arg3: *const cty::c_uint,
        arg4: cty::c_int,
        arg5: cty::c_int,
        arg6: cty::c_int,
        arg7: *mut cty::c_int,
        arg8: cty::c_int,
        arg9: *mut pcre32_jit_stack,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre_free_substring(arg1: *const cty::c_char);
}
extern "C" {
    pub fn pcre16_free_substring(arg1: *const cty::c_ushort);
}
extern "C" {
    pub fn pcre32_free_substring(arg1: *const cty::c_uint);
}
extern "C" {
    pub fn pcre_free_substring_list(arg1: *mut *const cty::c_char);
}
extern "C" {
    pub fn pcre16_free_substring_list(arg1: *mut *const cty::c_ushort);
}
extern "C" {
    pub fn pcre32_free_substring_list(arg1: *mut *const cty::c_uint);
}
extern "C" {
    pub fn pcre_fullinfo(
        arg1: *const pcre,
        arg2: *const pcre_extra,
        arg3: cty::c_int,
        arg4: *mut cty::c_void,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_fullinfo(
        arg1: *const pcre16,
        arg2: *const pcre16_extra,
        arg3: cty::c_int,
        arg4: *mut cty::c_void,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_fullinfo(
        arg1: *const pcre32,
        arg2: *const pcre32_extra,
        arg3: cty::c_int,
        arg4: *mut cty::c_void,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre_get_named_substring(
        arg1: *const pcre,
        arg2: *const cty::c_char,
        arg3: *mut cty::c_int,
        arg4: cty::c_int,
        arg5: *const cty::c_char,
        arg6: *mut *const cty::c_char,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_get_named_substring(
        arg1: *const pcre16,
        arg2: *const cty::c_ushort,
        arg3: *mut cty::c_int,
        arg4: cty::c_int,
        arg5: *const cty::c_ushort,
        arg6: *mut *const cty::c_ushort,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_get_named_substring(
        arg1: *const pcre32,
        arg2: *const cty::c_uint,
        arg3: *mut cty::c_int,
        arg4: cty::c_int,
        arg5: *const cty::c_uint,
        arg6: *mut *const cty::c_uint,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre_get_stringnumber(arg1: *const pcre, arg2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_get_stringnumber(arg1: *const pcre16, arg2: *const cty::c_ushort) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_get_stringnumber(arg1: *const pcre32, arg2: *const cty::c_uint) -> cty::c_int;
}
extern "C" {
    pub fn pcre_get_stringtable_entries(
        arg1: *const pcre,
        arg2: *const cty::c_char,
        arg3: *mut *mut cty::c_char,
        arg4: *mut *mut cty::c_char,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_get_stringtable_entries(
        arg1: *const pcre16,
        arg2: *const cty::c_ushort,
        arg3: *mut *mut cty::c_ushort,
        arg4: *mut *mut cty::c_ushort,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_get_stringtable_entries(
        arg1: *const pcre32,
        arg2: *const cty::c_uint,
        arg3: *mut *mut cty::c_uint,
        arg4: *mut *mut cty::c_uint,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre_get_substring(
        arg1: *const cty::c_char,
        arg2: *mut cty::c_int,
        arg3: cty::c_int,
        arg4: cty::c_int,
        arg5: *mut *const cty::c_char,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_get_substring(
        arg1: *const cty::c_ushort,
        arg2: *mut cty::c_int,
        arg3: cty::c_int,
        arg4: cty::c_int,
        arg5: *mut *const cty::c_ushort,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_get_substring(
        arg1: *const cty::c_uint,
        arg2: *mut cty::c_int,
        arg3: cty::c_int,
        arg4: cty::c_int,
        arg5: *mut *const cty::c_uint,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre_get_substring_list(
        arg1: *const cty::c_char,
        arg2: *mut cty::c_int,
        arg3: cty::c_int,
        arg4: *mut *mut *const cty::c_char,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_get_substring_list(
        arg1: *const cty::c_ushort,
        arg2: *mut cty::c_int,
        arg3: cty::c_int,
        arg4: *mut *mut *const cty::c_ushort,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_get_substring_list(
        arg1: *const cty::c_uint,
        arg2: *mut cty::c_int,
        arg3: cty::c_int,
        arg4: *mut *mut *const cty::c_uint,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre_maketables() -> *const cty::c_uchar;
}
extern "C" {
    pub fn pcre16_maketables() -> *const cty::c_uchar;
}
extern "C" {
    pub fn pcre32_maketables() -> *const cty::c_uchar;
}
extern "C" {
    pub fn pcre_refcount(arg1: *mut pcre, arg2: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_refcount(arg1: *mut pcre16, arg2: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_refcount(arg1: *mut pcre32, arg2: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn pcre_study(
        arg1: *const pcre,
        arg2: cty::c_int,
        arg3: *mut *const cty::c_char,
    ) -> *mut pcre_extra;
}
extern "C" {
    pub fn pcre16_study(
        arg1: *const pcre16,
        arg2: cty::c_int,
        arg3: *mut *const cty::c_char,
    ) -> *mut pcre16_extra;
}
extern "C" {
    pub fn pcre32_study(
        arg1: *const pcre32,
        arg2: cty::c_int,
        arg3: *mut *const cty::c_char,
    ) -> *mut pcre32_extra;
}
extern "C" {
    pub fn pcre_free_study(arg1: *mut pcre_extra);
}
extern "C" {
    pub fn pcre16_free_study(arg1: *mut pcre16_extra);
}
extern "C" {
    pub fn pcre32_free_study(arg1: *mut pcre32_extra);
}
extern "C" {
    pub fn pcre_version() -> *const cty::c_char;
}
extern "C" {
    pub fn pcre16_version() -> *const cty::c_char;
}
extern "C" {
    pub fn pcre32_version() -> *const cty::c_char;
}
extern "C" {
    pub fn pcre_pattern_to_host_byte_order(
        arg1: *mut pcre,
        arg2: *mut pcre_extra,
        arg3: *const cty::c_uchar,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_pattern_to_host_byte_order(
        arg1: *mut pcre16,
        arg2: *mut pcre16_extra,
        arg3: *const cty::c_uchar,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_pattern_to_host_byte_order(
        arg1: *mut pcre32,
        arg2: *mut pcre32_extra,
        arg3: *const cty::c_uchar,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre16_utf16_to_host_byte_order(
        arg1: *mut cty::c_ushort,
        arg2: *const cty::c_ushort,
        arg3: cty::c_int,
        arg4: *mut cty::c_int,
        arg5: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre32_utf32_to_host_byte_order(
        arg1: *mut cty::c_uint,
        arg2: *const cty::c_uint,
        arg3: cty::c_int,
        arg4: *mut cty::c_int,
        arg5: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pcre_jit_stack_alloc(arg1: cty::c_int, arg2: cty::c_int) -> *mut pcre_jit_stack;
}
extern "C" {
    pub fn pcre16_jit_stack_alloc(arg1: cty::c_int, arg2: cty::c_int) -> *mut pcre16_jit_stack;
}
extern "C" {
    pub fn pcre32_jit_stack_alloc(arg1: cty::c_int, arg2: cty::c_int) -> *mut pcre32_jit_stack;
}
extern "C" {
    pub fn pcre_jit_stack_free(arg1: *mut pcre_jit_stack);
}
extern "C" {
    pub fn pcre16_jit_stack_free(arg1: *mut pcre16_jit_stack);
}
extern "C" {
    pub fn pcre32_jit_stack_free(arg1: *mut pcre32_jit_stack);
}
extern "C" {
    pub fn pcre_assign_jit_stack(
        arg1: *mut pcre_extra,
        arg2: pcre_jit_callback,
        arg3: *mut cty::c_void,
    );
}
extern "C" {
    pub fn pcre16_assign_jit_stack(
        arg1: *mut pcre16_extra,
        arg2: pcre16_jit_callback,
        arg3: *mut cty::c_void,
    );
}
extern "C" {
    pub fn pcre32_assign_jit_stack(
        arg1: *mut pcre32_extra,
        arg2: pcre32_jit_callback,
        arg3: *mut cty::c_void,
    );
}
extern "C" {
    pub fn pcre_jit_free_unused_memory();
}
extern "C" {
    pub fn pcre16_jit_free_unused_memory();
}
extern "C" {
    pub fn pcre32_jit_free_unused_memory();
}
pub const case_behavior_CASE_DEFAULT: case_behavior = 0;
pub const case_behavior_CASE_SENSITIVE: case_behavior = 1;
pub const case_behavior_CASE_INSENSITIVE: case_behavior = 2;
pub const case_behavior_CASE_SMART: case_behavior = 3;
pub const case_behavior_CASE_SENSITIVE_RETRY_INSENSITIVE: case_behavior = 4;
pub type case_behavior = u32;
pub const path_print_behavior_PATH_PRINT_DEFAULT: path_print_behavior = 0;
pub const path_print_behavior_PATH_PRINT_DEFAULT_EACH_LINE: path_print_behavior = 1;
pub const path_print_behavior_PATH_PRINT_TOP: path_print_behavior = 2;
pub const path_print_behavior_PATH_PRINT_EACH_LINE: path_print_behavior = 3;
pub const path_print_behavior_PATH_PRINT_NOTHING: path_print_behavior = 4;
pub type path_print_behavior = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cli_options {
    pub ackmate: cty::c_int,
    pub ackmate_dir_filter: *mut pcre,
    pub ackmate_dir_filter_extra: *mut pcre_extra,
    pub after: size_t,
    pub before: size_t,
    pub casing: case_behavior,
    pub file_search_string: *const cty::c_char,
    pub match_files: cty::c_int,
    pub file_search_regex: *mut pcre,
    pub file_search_regex_extra: *mut pcre_extra,
    pub color: cty::c_int,
    pub color_line_number: *mut cty::c_char,
    pub color_match: *mut cty::c_char,
    pub color_path: *mut cty::c_char,
    pub color_win_ansi: cty::c_int,
    pub column: cty::c_int,
    pub context: cty::c_int,
    pub follow_symlinks: cty::c_int,
    pub invert_match: cty::c_int,
    pub literal: cty::c_int,
    pub literal_starts_wordchar: cty::c_int,
    pub literal_ends_wordchar: cty::c_int,
    pub max_matches_per_file: size_t,
    pub max_search_depth: cty::c_int,
    pub mmap: cty::c_int,
    pub multiline: cty::c_int,
    pub one_dev: cty::c_int,
    pub only_matching: cty::c_int,
    pub path_sep: cty::c_char,
    pub path_to_ignore: cty::c_int,
    pub print_break: cty::c_int,
    pub print_count: cty::c_int,
    pub print_filename_only: cty::c_int,
    pub print_nonmatching_files: cty::c_int,
    pub print_path: cty::c_int,
    pub print_all_paths: cty::c_int,
    pub print_line_numbers: cty::c_int,
    pub print_long_lines: cty::c_int,
    pub passthrough: cty::c_int,
    pub re: *mut pcre,
    pub re_extra: *mut pcre_extra,
    pub recurse_dirs: cty::c_int,
    pub search_all_files: cty::c_int,
    pub skip_vcs_ignores: cty::c_int,
    pub search_binary_files: cty::c_int,
    pub search_zip_files: cty::c_int,
    pub search_hidden_files: cty::c_int,
    pub search_stream: cty::c_int,
    pub stats: cty::c_int,
    pub stream_line_num: size_t,
    pub match_found: cty::c_int,
    pub stdout_inode: ino_t,
    pub query: *mut cty::c_char,
    pub query_len: cty::c_int,
    pub pager: *mut cty::c_char,
    pub paths_len: cty::c_int,
    pub parallel: cty::c_int,
    pub use_thread_affinity: cty::c_int,
    pub vimgrep: cty::c_int,
    pub width: size_t,
    pub word_regexp: cty::c_int,
    pub workers: cty::c_int,
}
#[test]
fn bindgen_test_layout_cli_options() {
    assert_eq!(
        ::std::mem::size_of::<cli_options>(),
        344usize,
        concat!("Size of: ", stringify!(cli_options))
    );
    assert_eq!(
        ::std::mem::align_of::<cli_options>(),
        8usize,
        concat!("Alignment of ", stringify!(cli_options))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).ackmate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(ackmate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).ackmate_dir_filter as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(ackmate_dir_filter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_options>())).ackmate_dir_filter_extra as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(ackmate_dir_filter_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).after as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(after)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).before as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(before)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).casing as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(casing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).file_search_string as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(file_search_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).match_files as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(match_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).file_search_regex as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(file_search_regex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_options>())).file_search_regex_extra as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(file_search_regex_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).color as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).color_line_number as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(color_line_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).color_match as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(color_match)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).color_path as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(color_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).color_win_ansi as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(color_win_ansi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).column as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).context as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).follow_symlinks as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(follow_symlinks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).invert_match as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(invert_match)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).literal as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(literal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_options>())).literal_starts_wordchar as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(literal_starts_wordchar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_options>())).literal_ends_wordchar as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(literal_ends_wordchar)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_options>())).max_matches_per_file as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(max_matches_per_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).max_search_depth as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(max_search_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).mmap as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(mmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).multiline as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(multiline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).one_dev as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(one_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).only_matching as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(only_matching)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).path_sep as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(path_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).path_to_ignore as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(path_to_ignore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).print_break as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(print_break)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).print_count as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(print_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).print_filename_only as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(print_filename_only)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cli_options>())).print_nonmatching_files as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(print_nonmatching_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).print_path as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(print_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).print_all_paths as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(print_all_paths)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).print_line_numbers as *const _ as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(print_line_numbers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).print_long_lines as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(print_long_lines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).passthrough as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(passthrough)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).re as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(re)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).re_extra as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(re_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).recurse_dirs as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(recurse_dirs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).search_all_files as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(search_all_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).skip_vcs_ignores as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(skip_vcs_ignores)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).search_binary_files as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(search_binary_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).search_zip_files as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(search_zip_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).search_hidden_files as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(search_hidden_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).search_stream as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(search_stream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).stats as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).stream_line_num as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(stream_line_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).match_found as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(match_found)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).stdout_inode as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(stdout_inode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).query as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(query)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).query_len as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(query_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).pager as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(pager)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).paths_len as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(paths_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).parallel as *const _ as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(parallel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).use_thread_affinity as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(use_thread_affinity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).vimgrep as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(vimgrep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).width as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).word_regexp as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(word_regexp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cli_options>())).workers as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(cli_options),
            "::",
            stringify!(workers)
        )
    );
}
extern "C" {
    pub static mut opts: cli_options;
}
pub type option_t = option;
extern "C" {
    pub fn usage();
}
extern "C" {
    pub fn print_version();
}
extern "C" {
    pub fn init_options();
}
extern "C" {
    pub fn parse_options(
        argc: cty::c_int,
        argv: *mut *mut cty::c_char,
        base_paths: *mut *mut *mut cty::c_char,
        paths: *mut *mut *mut cty::c_char,
    );
}
extern "C" {
    pub fn cleanup_options();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: cty::c_ushort,
    pub d_type: cty::c_uchar,
    pub d_name: [cty::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        280usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_ino as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_off as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_reclen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_type as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dirent>())).d_name as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
pub const DT_UNKNOWN: _bindgen_ty_1 = 0;
pub const DT_FIFO: _bindgen_ty_1 = 1;
pub const DT_CHR: _bindgen_ty_1 = 2;
pub const DT_DIR: _bindgen_ty_1 = 4;
pub const DT_BLK: _bindgen_ty_1 = 6;
pub const DT_REG: _bindgen_ty_1 = 8;
pub const DT_LNK: _bindgen_ty_1 = 10;
pub const DT_SOCK: _bindgen_ty_1 = 12;
pub const DT_WHT: _bindgen_ty_1 = 14;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
extern "C" {
    pub fn opendir(__name: *const cty::c_char) -> *mut DIR;
}
extern "C" {
    pub fn fdopendir(__fd: cty::c_int) -> *mut DIR;
}
extern "C" {
    pub fn closedir(__dirp: *mut DIR) -> cty::c_int;
}
extern "C" {
    pub fn readdir(__dirp: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn readdir_r(
        __dirp: *mut DIR,
        __entry: *mut dirent,
        __result: *mut *mut dirent,
    ) -> cty::c_int;
}
extern "C" {
    pub fn rewinddir(__dirp: *mut DIR);
}
extern "C" {
    pub fn seekdir(__dirp: *mut DIR, __pos: cty::c_long);
}
extern "C" {
    pub fn telldir(__dirp: *mut DIR) -> cty::c_long;
}
extern "C" {
    pub fn dirfd(__dirp: *mut DIR) -> cty::c_int;
}
extern "C" {
    pub fn scandir(
        __dir: *const cty::c_char,
        __namelist: *mut *mut *mut dirent,
        __selector: ::std::option::Option<unsafe extern "C" fn(arg1: *const dirent) -> cty::c_int>,
        __cmp: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut *const dirent, arg2: *mut *const dirent) -> cty::c_int,
        >,
    ) -> cty::c_int;
}
extern "C" {
    pub fn alphasort(__e1: *mut *const dirent, __e2: *mut *const dirent) -> cty::c_int;
}
extern "C" {
    pub fn getdirentries(
        __fd: cty::c_int,
        __buf: *mut cty::c_char,
        __nbytes: size_t,
        __basep: *mut __off_t,
    ) -> __ssize_t;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = cty::c_schar;
pub type int_fast16_t = cty::c_long;
pub type int_fast32_t = cty::c_long;
pub type int_fast64_t = cty::c_long;
pub type uint_fast8_t = cty::c_uchar;
pub type uint_fast16_t = cty::c_ulong;
pub type uint_fast32_t = cty::c_ulong;
pub type uint_fast64_t = cty::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: cty::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: cty::c_uint,
    pub __wchb: [cty::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = cty::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: cty::c_int,
    pub _IO_read_ptr: *mut cty::c_char,
    pub _IO_read_end: *mut cty::c_char,
    pub _IO_read_base: *mut cty::c_char,
    pub _IO_write_base: *mut cty::c_char,
    pub _IO_write_ptr: *mut cty::c_char,
    pub _IO_write_end: *mut cty::c_char,
    pub _IO_buf_base: *mut cty::c_char,
    pub _IO_buf_end: *mut cty::c_char,
    pub _IO_save_base: *mut cty::c_char,
    pub _IO_backup_base: *mut cty::c_char,
    pub _IO_save_end: *mut cty::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: cty::c_int,
    pub _flags2: cty::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: cty::c_ushort,
    pub _vtable_offset: cty::c_schar,
    pub _shortbuf: [cty::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut cty::c_void,
    pub __pad5: size_t,
    pub _mode: cty::c_int,
    pub _unused2: [cty::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn rename(__old: *const cty::c_char, __new: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: cty::c_int,
        __old: *const cty::c_char,
        __newfd: cty::c_int,
        __new: *const cty::c_char,
    ) -> cty::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const cty::c_char, __pfx: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const cty::c_char, __modes: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const cty::c_char,
        __modes: *const cty::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: cty::c_int, __modes: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut cty::c_void, __len: size_t, __modes: *const cty::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut cty::c_char, __sizeloc: *mut size_t) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut cty::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut cty::c_char,
        __modes: cty::c_int,
        __n: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut cty::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn printf(__format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut cty::c_char, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const cty::c_char, __arg: *mut __va_list_tag) -> cty::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut cty::c_char,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut cty::c_char,
        __maxlen: cty::c_ulong,
        __format: *const cty::c_char,
        ...
    ) -> cty::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut cty::c_char,
        __maxlen: cty::c_ulong,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: cty::c_int,
        __fmt: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn dprintf(__fd: cty::c_int, __fmt: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn scanf(__format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const cty::c_char, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(__s: *const cty::c_char, __format: *const cty::c_char, ...) -> cty::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const cty::c_char, __arg: *mut __va_list_tag) -> cty::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const cty::c_char,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(__format: *const cty::c_char, __arg: *mut __va_list_tag) -> cty::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const cty::c_char,
        __format: *const cty::c_char,
        __arg: *mut __va_list_tag,
    ) -> cty::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn getchar() -> cty::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> cty::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fputc(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putc(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putchar(__c: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn putw(__w: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut cty::c_char, __n: cty::c_int, __stream: *mut FILE) -> *mut cty::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut cty::c_char,
        __n: *mut size_t,
        __delimiter: cty::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut cty::c_char,
        __n: *mut size_t,
        __delimiter: cty::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut cty::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const cty::c_char, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn puts(__s: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn ungetc(__c: cty::c_int, __stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut cty::c_void,
        __size: cty::c_ulong,
        __n: cty::c_ulong,
        __stream: *mut FILE,
    ) -> cty::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const cty::c_void,
        __size: cty::c_ulong,
        __n: cty::c_ulong,
        __s: *mut FILE,
    ) -> cty::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut cty::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const cty::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: cty::c_long, __whence: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> cty::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t, __whence: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> cty::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> cty::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn perror(__s: *const cty::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn popen(__command: *const cty::c_char, __modes: *const cty::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> cty::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut cty::c_void,
        __src: *const cty::c_void,
        __n: cty::c_ulong,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut cty::c_void,
        __src: *const cty::c_void,
        __n: cty::c_ulong,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut cty::c_void,
        __src: *const cty::c_void,
        __c: cty::c_int,
        __n: cty::c_ulong,
    ) -> *mut cty::c_void;
}
extern "C" {
    pub fn memset(__s: *mut cty::c_void, __c: cty::c_int, __n: cty::c_ulong) -> *mut cty::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const cty::c_void,
        __s2: *const cty::c_void,
        __n: cty::c_ulong,
    ) -> cty::c_int;
}
extern "C" {
    pub fn memchr(__s: *const cty::c_void, __c: cty::c_int, __n: cty::c_ulong) -> *mut cty::c_void;
}
extern "C" {
    pub fn strcpy(__dest: *mut cty::c_char, __src: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut cty::c_char,
        __src: *const cty::c_char,
        __n: cty::c_ulong,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcat(__dest: *mut cty::c_char, __src: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut cty::c_char,
        __src: *const cty::c_char,
        __n: cty::c_ulong,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcmp(__s1: *const cty::c_char, __s2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const cty::c_char,
        __s2: *const cty::c_char,
        __n: cty::c_ulong,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strcoll(__s1: *const cty::c_char, __s2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut cty::c_char,
        __src: *const cty::c_char,
        __n: cty::c_ulong,
    ) -> cty::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const cty::c_ushort,
    pub __ctype_tolower: *const cty::c_int,
    pub __ctype_toupper: *const cty::c_int,
    pub __names: [*const cty::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const cty::c_char,
        __s2: *const cty::c_char,
        __l: locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut cty::c_char,
        __src: *const cty::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(__s: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strndup(__string: *const cty::c_char, __n: cty::c_ulong) -> *mut cty::c_char;
}
extern "C" {
    pub fn strchr(__s: *const cty::c_char, __c: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strrchr(__s: *const cty::c_char, __c: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn strcspn(__s: *const cty::c_char, __reject: *const cty::c_char) -> cty::c_ulong;
}
extern "C" {
    pub fn strspn(__s: *const cty::c_char, __accept: *const cty::c_char) -> cty::c_ulong;
}
extern "C" {
    pub fn strpbrk(__s: *const cty::c_char, __accept: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn strstr(__haystack: *const cty::c_char, __needle: *const cty::c_char)
        -> *mut cty::c_char;
}
extern "C" {
    pub fn strtok(__s: *mut cty::c_char, __delim: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut cty::c_char,
        __delim: *const cty::c_char,
        __save_ptr: *mut *mut cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut cty::c_char,
        __delim: *const cty::c_char,
        __save_ptr: *mut *mut cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strlen(__s: *const cty::c_char) -> cty::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const cty::c_char, __maxlen: size_t) -> size_t;
}
extern "C" {
    pub fn strerror(__errnum: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: cty::c_int,
        __buf: *mut cty::c_char,
        __buflen: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strerror_l(__errnum: cty::c_int, __l: locale_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const cty::c_void,
        __s2: *const cty::c_void,
        __n: cty::c_ulong,
    ) -> cty::c_int;
}
extern "C" {
    pub fn bcopy(__src: *const cty::c_void, __dest: *mut cty::c_void, __n: size_t);
}
extern "C" {
    pub fn bzero(__s: *mut cty::c_void, __n: cty::c_ulong);
}
extern "C" {
    pub fn index(__s: *const cty::c_char, __c: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn rindex(__s: *const cty::c_char, __c: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn ffs(__i: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn ffsl(__l: cty::c_long) -> cty::c_int;
}
extern "C" {
    pub fn ffsll(__ll: cty::c_longlong) -> cty::c_int;
}
extern "C" {
    pub fn strcasecmp(__s1: *const cty::c_char, __s2: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const cty::c_char,
        __s2: *const cty::c_char,
        __n: cty::c_ulong,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const cty::c_char,
        __s2: *const cty::c_char,
        __loc: locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const cty::c_char,
        __s2: *const cty::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut cty::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut cty::c_char,
        __delim: *const cty::c_char,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn strsignal(__sig: cty::c_int) -> *mut cty::c_char;
}
extern "C" {
    pub fn __stpcpy(__dest: *mut cty::c_char, __src: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn stpcpy(__dest: *mut cty::c_char, __src: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut cty::c_char,
        __src: *const cty::c_char,
        __n: size_t,
    ) -> *mut cty::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut cty::c_char,
        __src: *const cty::c_char,
        __n: cty::c_ulong,
    ) -> *mut cty::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: cty::c_int,
    pub tz_dsttime: cty::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_minuteswest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_dsttime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: *mut cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> cty::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> cty::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = cty::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> cty::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> cty::c_int;
}
extern "C" {
    pub fn utimes(__file: *const cty::c_char, __tvp: *const timeval) -> cty::c_int;
}
extern "C" {
    pub fn lutimes(__file: *const cty::c_char, __tvp: *const timeval) -> cty::c_int;
}
extern "C" {
    pub fn futimes(__fd: cty::c_int, __tvp: *const timeval) -> cty::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: cty::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sched_param>())).sched_priority as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
}
pub type __cpu_mask = cty::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cpu_set_t>())).__bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
extern "C" {
    pub fn __sched_cpucount(__setsize: size_t, __setp: *const cpu_set_t) -> cty::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: size_t) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> cty::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> cty::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: cty::c_int,
        __param: *const sched_param,
    ) -> cty::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> cty::c_int;
}
extern "C" {
    pub fn sched_yield() -> cty::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> cty::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: cty::c_int,
    pub tm_min: cty::c_int,
    pub tm_hour: cty::c_int,
    pub tm_mday: cty::c_int,
    pub tm_mon: cty::c_int,
    pub tm_year: cty::c_int,
    pub tm_wday: cty::c_int,
    pub tm_yday: cty::c_int,
    pub tm_isdst: cty::c_int,
    pub tm_gmtoff: cty::c_long,
    pub tm_zone: *const cty::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut cty::c_char,
        __maxsize: size_t,
        __format: *const cty::c_char,
        __tp: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut cty::c_char,
        __maxsize: size_t,
        __format: *const cty::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut cty::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn asctime_r(__tp: *const tm, __buf: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn ctime_r(__timer: *const time_t, __buf: *mut cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut cty::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: cty::c_int;
}
extern "C" {
    pub static mut __timezone: cty::c_long;
}
extern "C" {
    pub static mut tzname: [*mut cty::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: cty::c_int;
}
extern "C" {
    pub static mut timezone: cty::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn nanosleep(__requested_time: *const timespec, __remaining: *mut timespec) -> cty::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> cty::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> cty::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> cty::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: cty::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> cty::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> cty::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> cty::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: cty::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> cty::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> cty::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> cty::c_int;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: cty::c_int) -> cty::c_int;
}
pub type __jmp_buf = [cty::c_long; 8usize];
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_2 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = u32;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_3 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_3 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_3 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_3 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_3 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_3 = 0;
pub type _bindgen_ty_3 = u32;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_4 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_4 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_4 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_4 = 1;
pub type _bindgen_ty_4 = u32;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_5 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_5 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_5 = 2;
pub type _bindgen_ty_5 = u32;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_6 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_6 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_6 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_6 = 0;
pub type _bindgen_ty_6 = u32;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_7 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = u32;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_8 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = u32;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_9 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>,
    pub __arg: *mut cty::c_void,
    pub __canceltype: cty::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    assert_eq!(
        ::std::mem::size_of::<_pthread_cleanup_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cleanup_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__arg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__canceltype as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__canceltype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_pthread_cleanup_buffer>())).__prev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__prev)
        )
    );
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_10 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = u32;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_11 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_11 = 1;
pub type _bindgen_ty_11 = u32;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut cty::c_void) -> *mut cty::c_void,
        >,
        __arg: *mut cty::c_void,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut cty::c_void);
}
extern "C" {
    pub fn pthread_join(__th: pthread_t, __thread_return: *mut *mut cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(__attr: *mut pthread_attr_t, __scope: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut cty::c_void,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut cty::c_void,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut cty::c_void,
        __stacksize: *mut size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut cty::c_void,
        __stacksize: size_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: cty::c_int,
        __param: *const sched_param,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut cty::c_int,
        __param: *mut sched_param,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(__target_thread: pthread_t, __prio: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(__state: cty::c_int, __oldstate: *mut cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(__type: cty::c_int, __oldtype: *mut cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__pthread_unwind_buf_t__bindgen_ty_1; 1usize],
    pub __pad: [*mut cty::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t__bindgen_ty_1 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: cty::c_int,
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        72usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__cancel_jmp_buf
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t__bindgen_ty_1>())).__mask_was_saved
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t__bindgen_ty_1),
            "::",
            stringify!(__mask_was_saved)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t>(),
        104usize,
        concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__cancel_jmp_buf as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_unwind_buf_t>())).__pad as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>,
    pub __cancel_arg: *mut cty::c_void,
    pub __do_it: cty::c_int,
    pub __cancel_type: cty::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_frame>(),
        24usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_routine as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__do_it as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cleanup_frame>())).__cancel_type as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_type)
        )
    );
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    _unused: [u8; 0],
}
extern "C" {
    pub fn __sigsetjmp(__env: *mut __jmp_buf_tag, __savemask: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: cty::c_int,
        __old_ceiling: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_spin_init(__lock: *mut pthread_spinlock_t, __pshared: cty::c_int) -> cty::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: cty::c_uint,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<unsafe extern "C" fn(arg1: *mut cty::c_void)>,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> cty::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn pthread_setspecific(__key: pthread_key_t, __pointer: *const cty::c_void) -> cty::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> cty::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> cty::c_int;
}
extern "C" {
    pub static mut print_mtx: pthread_mutex_t;
}
pub const log_level_LOG_LEVEL_DEBUG: log_level = 10;
pub const log_level_LOG_LEVEL_MSG: log_level = 20;
pub const log_level_LOG_LEVEL_WARN: log_level = 30;
pub const log_level_LOG_LEVEL_ERR: log_level = 40;
pub const log_level_LOG_LEVEL_NONE: log_level = 100;
pub type log_level = u32;
extern "C" {
    pub fn set_log_level(threshold: log_level);
}
extern "C" {
    pub fn log_debug(fmt: *const cty::c_char, ...);
}
extern "C" {
    pub fn log_msg(fmt: *const cty::c_char, ...);
}
extern "C" {
    pub fn log_warn(fmt: *const cty::c_char, ...);
}
extern "C" {
    pub fn log_err(fmt: *const cty::c_char, ...);
}
extern "C" {
    pub fn vplog(level: cty::c_uint, fmt: *const cty::c_char, args: *mut __va_list_tag);
}
extern "C" {
    pub fn plog(level: cty::c_uint, fmt: *const cty::c_char, ...);
}
extern "C" {
    pub static mut out_fd: *mut FILE;
}
extern "C" {
    pub fn ag_malloc(size: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn ag_realloc(ptr: *mut cty::c_void, size: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn ag_calloc(nelem: size_t, elsize: size_t) -> *mut cty::c_void;
}
extern "C" {
    pub fn ag_strdup(s: *const cty::c_char) -> *mut cty::c_char;
}
extern "C" {
    pub fn ag_strndup(s: *const cty::c_char, size: size_t) -> *mut cty::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct match_t {
    pub start: size_t,
    pub end: size_t,
}
#[test]
fn bindgen_test_layout_match_t() {
    assert_eq!(
        ::std::mem::size_of::<match_t>(),
        16usize,
        concat!("Size of: ", stringify!(match_t))
    );
    assert_eq!(
        ::std::mem::align_of::<match_t>(),
        8usize,
        concat!("Alignment of ", stringify!(match_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<match_t>())).start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(match_t),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<match_t>())).end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(match_t),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ag_stats {
    pub total_bytes: size_t,
    pub total_files: size_t,
    pub total_matches: size_t,
    pub total_file_matches: size_t,
    pub time_start: timeval,
    pub time_end: timeval,
}
#[test]
fn bindgen_test_layout_ag_stats() {
    assert_eq!(
        ::std::mem::size_of::<ag_stats>(),
        64usize,
        concat!("Size of: ", stringify!(ag_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<ag_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(ag_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ag_stats>())).total_bytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ag_stats),
            "::",
            stringify!(total_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ag_stats>())).total_files as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ag_stats),
            "::",
            stringify!(total_files)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ag_stats>())).total_matches as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ag_stats),
            "::",
            stringify!(total_matches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ag_stats>())).total_file_matches as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ag_stats),
            "::",
            stringify!(total_file_matches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ag_stats>())).time_start as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ag_stats),
            "::",
            stringify!(time_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ag_stats>())).time_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ag_stats),
            "::",
            stringify!(time_end)
        )
    );
}
extern "C" {
    pub static mut stats: ag_stats;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union word_t {
    pub as_chars: [cty::c_char; 2usize],
    pub as_word: u16,
    _bindgen_union_align: u16,
}
#[test]
fn bindgen_test_layout_word_t() {
    assert_eq!(
        ::std::mem::size_of::<word_t>(),
        2usize,
        concat!("Size of: ", stringify!(word_t))
    );
    assert_eq!(
        ::std::mem::align_of::<word_t>(),
        2usize,
        concat!("Alignment of ", stringify!(word_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<word_t>())).as_chars as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(word_t),
            "::",
            stringify!(as_chars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<word_t>())).as_word as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(word_t),
            "::",
            stringify!(as_word)
        )
    );
}
extern "C" {
    pub fn free_strings(strs: *mut *mut cty::c_char, strs_len: size_t);
}
extern "C" {
    pub fn generate_alpha_skip(
        find: *const cty::c_char,
        f_len: size_t,
        skip_lookup: *mut size_t,
        case_sensitive: cty::c_int,
    );
}
extern "C" {
    pub fn is_prefix(
        s: *const cty::c_char,
        s_len: size_t,
        pos: size_t,
        case_sensitive: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn suffix_len(
        s: *const cty::c_char,
        s_len: size_t,
        pos: size_t,
        case_sensitive: cty::c_int,
    ) -> size_t;
}
extern "C" {
    pub fn generate_find_skip(
        find: *const cty::c_char,
        f_len: size_t,
        skip_lookup: *mut *mut size_t,
        case_sensitive: cty::c_int,
    );
}
extern "C" {
    pub fn generate_hash(
        find: *const cty::c_char,
        f_len: size_t,
        H: *mut u8,
        case_sensitive: cty::c_int,
    );
}
extern "C" {
    pub fn ag_max(a: size_t, b: size_t) -> size_t;
}
extern "C" {
    pub fn ag_min(a: size_t, b: size_t) -> size_t;
}
extern "C" {
    pub fn boyer_moore_strnstr(
        s: *const cty::c_char,
        find: *const cty::c_char,
        s_len: size_t,
        f_len: size_t,
        alpha_skip_lookup: *const size_t,
        find_skip_lookup: *const size_t,
        case_insensitive: cty::c_int,
    ) -> *const cty::c_char;
}
extern "C" {
    pub fn hash_strnstr(
        s: *const cty::c_char,
        find: *const cty::c_char,
        s_len: size_t,
        f_len: size_t,
        h_table: *mut u8,
        case_sensitive: cty::c_int,
    ) -> *const cty::c_char;
}
extern "C" {
    pub fn invert_matches(
        buf: *const cty::c_char,
        buf_len: size_t,
        matches: *mut match_t,
        matches_len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn realloc_matches(
        matches: *mut *mut match_t,
        matches_size: *mut size_t,
        matches_len: size_t,
    );
}
extern "C" {
    pub fn compile_study(
        re: *mut *mut pcre,
        re_extra: *mut *mut pcre_extra,
        q: *mut cty::c_char,
        pcre_opts: cty::c_int,
        study_opts: cty::c_int,
    );
}
extern "C" {
    pub fn is_binary(buf: *const cty::c_void, buf_len: size_t) -> cty::c_int;
}
extern "C" {
    pub fn is_regex(query: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn is_fnmatch(filename: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn binary_search(
        needle: *const cty::c_char,
        haystack: *mut *mut cty::c_char,
        start: cty::c_int,
        end: cty::c_int,
    ) -> cty::c_int;
}
extern "C" {
    pub fn init_wordchar_table();
}
extern "C" {
    pub fn is_wordchar(ch: cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn is_lowercase(s: *const cty::c_char) -> cty::c_int;
}
extern "C" {
    pub fn is_directory(path: *const cty::c_char, d: *const dirent) -> cty::c_int;
}
extern "C" {
    pub fn is_symlink(path: *const cty::c_char, d: *const dirent) -> cty::c_int;
}
extern "C" {
    pub fn is_named_pipe(path: *const cty::c_char, d: *const dirent) -> cty::c_int;
}
extern "C" {
    pub fn die(fmt: *const cty::c_char, ...);
}
extern "C" {
    pub fn ag_asprintf(ret: *mut *mut cty::c_char, fmt: *const cty::c_char, ...);
}
extern "C" {
    pub fn buf_getline(
        line: *mut *const cty::c_char,
        buf: *const cty::c_char,
        buf_len: size_t,
        buf_offset: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn fgetln(fp: *mut FILE, lenp: *mut size_t) -> *mut cty::c_char;
}
extern "C" {
    pub fn strlcpy(
        dest: *mut cty::c_char,
        src: *const cty::c_char,
        size: cty::c_ulong,
    ) -> cty::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ignores {
    pub extensions: *mut *mut cty::c_char,
    pub extensions_len: size_t,
    pub names: *mut *mut cty::c_char,
    pub names_len: size_t,
    pub slash_names: *mut *mut cty::c_char,
    pub slash_names_len: size_t,
    pub regexes: *mut *mut cty::c_char,
    pub regexes_len: size_t,
    pub invert_regexes: *mut *mut cty::c_char,
    pub invert_regexes_len: size_t,
    pub slash_regexes: *mut *mut cty::c_char,
    pub slash_regexes_len: size_t,
    pub dirname: *const cty::c_char,
    pub dirname_len: size_t,
    pub abs_path: *mut cty::c_char,
    pub abs_path_len: size_t,
    pub parent: *mut ignores,
}
#[test]
fn bindgen_test_layout_ignores() {
    assert_eq!(
        ::std::mem::size_of::<ignores>(),
        136usize,
        concat!("Size of: ", stringify!(ignores))
    );
    assert_eq!(
        ::std::mem::align_of::<ignores>(),
        8usize,
        concat!("Alignment of ", stringify!(ignores))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).extensions as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(extensions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).extensions_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(extensions_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).names as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).names_len as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(names_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).slash_names as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(slash_names)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).slash_names_len as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(slash_names_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).regexes as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(regexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).regexes_len as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(regexes_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).invert_regexes as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(invert_regexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).invert_regexes_len as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(invert_regexes_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).slash_regexes as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(slash_regexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).slash_regexes_len as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(slash_regexes_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).dirname as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(dirname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).dirname_len as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(dirname_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).abs_path as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(abs_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).abs_path_len as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(abs_path_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ignores>())).parent as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ignores),
            "::",
            stringify!(parent)
        )
    );
}
extern "C" {
    pub static mut root_ignores: *mut ignores;
}
extern "C" {
    pub static mut evil_hardcoded_ignore_files: [*const cty::c_char; 0usize];
}
extern "C" {
    pub static mut ignore_pattern_files: [*const cty::c_char; 0usize];
}
extern "C" {
    pub fn init_ignore(
        parent: *mut ignores,
        dirname: *const cty::c_char,
        dirname_len: size_t,
    ) -> *mut ignores;
}
extern "C" {
    pub fn cleanup_ignore(ig: *mut ignores);
}
extern "C" {
    pub fn add_ignore_pattern(ig: *mut ignores, pattern: *const cty::c_char);
}
extern "C" {
    pub fn load_ignore_patterns(ig: *mut ignores, path: *const cty::c_char);
}
extern "C" {
    pub fn filename_filter(
        path: *const cty::c_char,
        dir: *const dirent,
        baton: *mut cty::c_void,
    ) -> cty::c_int;
}
extern "C" {
    pub fn is_empty(ig: *mut ignores) -> cty::c_int;
}
extern "C" {
    pub fn path_ignore_search(
        ig: *const ignores,
        path: *const cty::c_char,
        filename: *const cty::c_char,
    ) -> cty::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct scandir_baton_t {
    pub ig: *const ignores,
    pub base_path: *const cty::c_char,
    pub base_path_len: size_t,
    pub path_start: *const cty::c_char,
}
#[test]
fn bindgen_test_layout_scandir_baton_t() {
    assert_eq!(
        ::std::mem::size_of::<scandir_baton_t>(),
        32usize,
        concat!("Size of: ", stringify!(scandir_baton_t))
    );
    assert_eq!(
        ::std::mem::align_of::<scandir_baton_t>(),
        8usize,
        concat!("Alignment of ", stringify!(scandir_baton_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<scandir_baton_t>())).ig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(scandir_baton_t),
            "::",
            stringify!(ig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<scandir_baton_t>())).base_path as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(scandir_baton_t),
            "::",
            stringify!(base_path)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<scandir_baton_t>())).base_path_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(scandir_baton_t),
            "::",
            stringify!(base_path_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<scandir_baton_t>())).path_start as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(scandir_baton_t),
            "::",
            stringify!(path_start)
        )
    );
}
pub type filter_fp = ::std::option::Option<
    unsafe extern "C" fn(
        path: *const cty::c_char,
        arg1: *const dirent,
        arg2: *mut cty::c_void,
    ) -> cty::c_int,
>;
extern "C" {
    pub fn ag_scandir(
        dirname: *const cty::c_char,
        namelist: *mut *mut *mut dirent,
        filter: filter_fp,
        baton: *mut cty::c_void,
    ) -> cty::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: cty::c_uint,
    pub fp_offset: cty::c_uint,
    pub overflow_arg_area: *mut cty::c_void,
    pub reg_save_area: *mut cty::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
