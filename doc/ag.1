.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "AG" "1" "June 2015" "" ""
.
.SH "NAME"
\fBag\fR \- The Silver Searcher\. Like ack, but faster\.
.
.SH "SYNOPSIS"
\fBag\fR [\fIfile\-type\fR] [\fIoptions\fR] PATTERN [PATH]
.
.SH "DESCRIPTION"
Recursively search for PATTERN in PATH\. Like grep or ack, but faster\.
.
.SH "OPTIONS"
.
.TP
\fB\-\-ackmate\fR
Output results in a format parseable by AckMate \fIhttps://github\.com/protocool/AckMate\fR\.
.
.TP
\fB\-a \-\-all\-types\fR
Search all files\. This doesn\'t include hidden files, and doesn\'t respect any ignore files\.
.
.TP
\fB\-A \-\-after [LINES]\fR
Print lines after match\. Defaults to 2\.
.
.TP
\fB\-B \-\-before [LINES]\fR
Print lines before match\. Defaults to 2\.
.
.TP
\fB\-\-[no]break\fR
Print a newline between matches in different files\. Enabled by default\.
.
.TP
\fB\-c \-\-count\fR
Only print the number of matches in each file\. Note: This is the number of matches, \fBnot\fR the number of matching lines\. Pipe output to \fBwc \-l\fR if you want the number of matching lines\.
.
.TP
\fB\-\-[no]color\fR
Print color codes in results\. Enabled by default\.
.
.TP
\fB\-\-color\-line\-number\fR
Color codes for line numbers\. Defaults to 1;33\.
.
.TP
\fB\-\-color\-match\fR
Color codes for result match numbers\. Defaults to 30;43\.
.
.TP
\fB\-\-color\-path\fR
Color codes for path names\. Defaults to 1;32\.
.
.TP
\fB\-\-column\fR
Print column numbers in results\.
.
.TP
\fB\-C \-\-context [LINES]\fR
Print lines before and after matches\. Defaults to 2\.
.
.TP
\fB\-D \-\-debug\fR
Output ridiculous amounts of debugging info\. Probably not useful\.
.
.TP
\fB\-\-depth NUM\fR
Search up to NUM directories deep, \-1 for unlimited\. Default is 25\.
.
.TP
\fB\-\-[no]filename\fR
Print file names\. Enabled by default, except when searching a single file\.
.
.TP
\fB\-f \-\-follow\fR
Follow symlinks\.
.
.TP
\fB\-F \-\-fixed\-strings\fR
Alias for \-\-literal for compatibility with grep\.
.
.TP
\fB\-\-[no]group\fR
The default, \fB\-\-group\fR, lumps multiple matches in the same file together, and presents them under a single occurrence of the filename\. \fB\-\-nogroup\fR refrains from this, and instead places the filename at the start of each match line\.
.
.TP
\fB\-g PATTERN\fR
Print filenames matching PATTERN\.
.
.TP
\fB\-G \-\-file\-search\-regex PATTERN\fR
Only search files whose names match PATTERN\.
.
.TP
\fB\-H \-\-[no]heading\fR
Print filenames above matching contents\.
.
.TP
\fB\-\-hidden\fR
Search hidden files\. This option obeys ignore files\.
.
.TP
\fB\-\-ignore PATTERN\fR
Ignore files/directories whose names match this pattern\. Literal file and directory names are also allowed\.
.
.TP
\fB\-\-ignore\-dir NAME\fR
Alias for \-\-ignore for compatibility with ack\.
.
.TP
\fB\-i \-\-ignore\-case\fR
Match case\-insensitively\.  Enabled by default if PATTERN is lowercase\.
.
.TP
\fB\-l \-\-files\-with\-matches\fR
Only print the names of files containing matches, not the matching lines\. An empty query will print all files that would be searched\.
.
.TP
\fB\-L \-\-files\-without\-matches\fR
Only print the names of files that don\'t contain matches\.
.
.TP
\fB\-\-list\-file\-types\fR
See \fBFILE TYPES\fR below\.
.
.TP
\fB\-m \-\-max\-count NUM\fR
Skip the rest of a file after NUM matches\. Default is 0, which never skips\.
.
.TP
\fB\-\-mgi\fR
Mimic Git Ignore. Force git to list all files it would ignore and
ignore same in ag\.  The listing is generated via this git command:
.RS 12
.P
git status --ignored --porcelain
.P
.RE
.RS 8
Not applicable if either \-U or \-a are selected.
.RE
.
.TP
\fB\-\-[no]numbers\fR
Print line numbers\. Default is to omit line numbers when searching streams\.
.
.TP
\fB\-o \-\-only\-matching\fR
Print only the matching part of the lines\.
.
.TP
\fB\-p \-\-path\-to\-agignore STRING\fR
Provide a path to a specific \.agignore file\.
.
.TP
\fB\-\-pager COMMAND\fR
Use a pager such as less\. Use \fB\-\-nopager\fR to override\. This option is also ignored if output is piped to another program\.
.
.TP
\fB\-\-print\-long\-lines\fR
Print matches on very long lines (> 2k characters by default)\.
.
.TP
\fB\-\-passthrough\fR
When searching a stream, print all lines even if they don\'t match\.
.
.TP
\fB\-Q \-\-literal\fR
Do not parse PATTERN as a regular expression\. Try to match it literally\.
.
.TP
\fB\-s \-\-case\-sensitive\fR
Match case\-sensitively\.  Enabled by default if PATTERN is \fBnot\fR
lowercase\.
.
.TP
\fB\-S \-\-smart\-case\fR
Match case\-sensitively if there are any uppercase letters in PATTERN, case\-insensitively otherwise\. Enabled by default\.
.
.TP
\fB\-\-search\-binary\fR
Search binary files for matches\.
.
.TP
\fB\-\-silent\fR
Suppress all log messages, including errors\.
.
.TP
\fB\-\-stats\fR
Print stats (files scanned, time taken, etc)\.
.
.TP
\fB\-t \-\-all\-text\fR
Search all text files\. This doesn\'t include hidden files\.
.
.TP
\fB\-u \-\-unrestricted\fR
Search \fIall\fR files\. This ignores \.agignore, \.gitignore, etc\. It searches binary and hidden files as well\.
.
.TP
\fB\-U \-\-skip\-vcs\-ignores\fR
Ignore VCS ignore files (\.gitignore, \.hgignore, svn:ignore), but still use \.agignore\.
.
.TP
\fB\-v \-\-invert\-match\fR
Match every line \fInot\fR containing the specified pattern\.
.
.TP
\fB\-\-vimgrep\fR
Output results like vim\'s \fB:vimgrep /pattern/g\fR would (it reports every match on the line)\.
.
.br
Here\'s a ~/\.vimrc configuration example:
.
.IP
\fBset grepprg=ag\e \-\-vimgrep\e $*\fR
.
.br
\fBset grepformat=%f:%l:%c:%m\fR
.
.IP
Then use \fB:grep\fR to grep for something\.
.
.br
Then use \fB:copen\fR, \fB:cn\fR, \fB:cp\fR, etc\. to navigate through the matches\.
.
.TP
\fB\-w \-\-word\-regexp\fR
Only match whole words\.
.
.TP
\fB\-z \-\-search\-zip\fR
Search contents of compressed files\.
.
.TP
\fB\-0 \-\-null \-\-print0\fR
Separate the filenames with \fB\e0\fR, rather than \fB\en\fR: this allows \fBxargs \-0 <command>\fR to correctly process filenames containing spaces or newlines\.
.
.SH "FILE TYPES"
It is possible to restrict the types of files searched\. For example, passing \fB\-\-html\fR as the \fBfile\-types\fR parameter will search only files with the extensions \fBhtm\fR, \fBhtml\fR, \fBshtml\fR or \fBxhtml\fR\. For a list of supported \fBfile\-types\fR run \fBag \-\-list\-file\-types\fR\.
.
.SH "IGNORING FILES"
By default, ag will ignore files whose names match patterns in \.gitignore, \.hgignore, or \.agignore\. These files can be anywhere in the directories being searched\. Ag also ignores files matched by the svn:ignore property if \fBsvn \-\-version\fR is 1\.6 or older\. Finally, ag looks in $HOME/\.agignore for ignore patterns\. Binary files are ignored by default as well\.
.
.P
If you want to ignore \.gitignore, \.hgignore, and svn:ignore, but still take \.agignore into account, use \fB\-U\fR\.
.
.P
Use the \fB\-t\fR option to search all text files; \fB\-a\fR to search all files; and \fB\-u\fR to search all, including hidden files\.
.
.SH "EXAMPLES"
\fBag printf\fR: Find matches for "printf" in the current directory\.
.
.P
\fBag foo /bar/\fR: Find matches for "foo" in path /bar/\.
.
.SH "REGULAR EXPRESSIONS"
Ag utilizes the pcre(3) regular expression library for pattern matching,
with the PCRE_MULTILINE option enabled.
This library's features are documented in the pcrepattern(3) man page.
.
.SH "MULTILINE REGEX CONSIDERATIONS"
Based on peak efficiency considerations, ag does \fBnot\fR
search a file line\-by\-line.
Instead, a given file is mapped into memory and
searched as one long string.  Consequently, the aforementioned
Perl MULTILINE Regex
feature is enabled to traverse an entire file's contents.
.P
MULTILINE searches treat newline (\\n) as just another character, which
generally does not matter, \fBexcept\fR in the context of a negated
character class (e.g., [^0-9]).  A negated character class matches \\n
\fBunless\fR it is included in the class.  The net result is that seemingly
simple patterns may match across one or more lines of a file.  This
surprising result is often not desired.  An example illustrates the
problem and its avoidance.
.P
Given file test.c with this snippet of code:
.RS 4
.P
sub(int *abc)
.br
{
.RS 4
.br
*abc = 700;
.RE
.br
}
.RE
.P
A simple search for an assignment to "abc":
.RS 4
.P
ag 'abc[^=]+=' test.c
.RE
.P
Yields this surprising result:
.RS 4
.P
1:sub(int *abc)
.br
2:{
.br
3:    *abc = 700;
.P
.RE
Initially, the regex matched "abc" on line 1.  Next, the [^=]+ pattern
matched all characters not '=', including \\n .  In other words,
Pcre gobbled up
everything from "abc" on line 1 to the point that a terminating '='
appeared on line 3.
.P
Adding \\n to the negated character class stops multi-line
matching, like so:
.RS 4
.P
ag 'abc[^=\\n]+=' test.c
.br
3:    *abc = 700;
.RE
.
.SH "CONFIGURATION FILES"
Ag reads \fBOPTIONS\fR from one of several configuration
files.  Ag processes "config file" options \fBbefore\fR command-line
options.  The config file format is very simple:
.P
.RS 4
# this is a comment => inline comments not supported
.br
# blank lines okay as well
.P
.br
\-\-long-option[=value]
.br
\-short-option[=value]
.br
\-\-long-option[ value]
.br
\-short-option[ value]
.P
.br
# And special keywords (of which there is only one)
.br
list
.RE
.P
Actual Example Config File
.br
==========================
.br
# set up nice colors for a white terminal bkgnd...
.P
.br
# bold blue
.br
\-\-color\-line\-number=1;34
.br
# black with grey bkgnd
.br
\-\-color\-match=30;47
.br
# green
.br
\-\-color\-path=32
.P
If the keyword "list" is included  in a config file,
ag dumps the contents of argv[] on stdout.  This is useful
for debugging config file errors that cause ag to output a usage
message and then silently exit.
.
.SH "CONFIGURATION FILE LOCATIONS"
Ag reads configuration information from a number of possible locations, in
the following order (first file found is used, all others ignored):
.RS
.P
.nf
1.   \fIPath specified in $AGRC_PATH\fR
.br
2.   \fI$XDG_CONFIG_HOME/agrc\fR
.br
3.   \fI~/.agrc\fR
.br
4.   \fI/usr/local/etc/agrc\fR
.br
5.   \fI/etc/agrc\fR
.fi
.RE
.
.SH "ENVIRONMENT VARIABLES"
.
.TP
.
\fBAGRC_PATH\fR
Specifies a complete path to an ag configuration file.
.
.SH "SEE ALSO"
.BR grep(1),
.BR pcre(3),
.BR pcrepattern(3)
